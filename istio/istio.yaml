---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-mixer-admin-role-binding-istio-system"
  labels:
    app: "mixer"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "mixer"
    release: "istio"
subjects:
- kind: "ServiceAccount"
  name: "istio-mixer-service-account"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "istio-mixer-istio-system"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-ingressgateway"
  labels:
    app: "istio-ingressgateway"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "gateways"
    istio: "ingressgateway"
    app.kubernetes.io/component: "deployment.istio-ingressgateway"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "LoadBalancer"
  selector:
    app: "istio-ingressgateway"
    istio: "ingressgateway"
    release: "istio"
    app.kubernetes.io/component: "deployment.istio-ingressgateway"
  ports:
  - name: "status-port"
    port: 15020
    targetPort: 15020
  - name: "http2"
    nodePort: 31380
    port: 80
    targetPort: 80
  - name: "https"
    nodePort: 31390
    port: 443
  - name: "tcp"
    nodePort: 31400
    port: 31400
  - name: "https-kiali"
    port: 15029
    targetPort: 15029
  - name: "https-prometheus"
    port: 15030
    targetPort: 15030
  - name: "https-grafana"
    port: 15031
    targetPort: 15031
  - name: "https-tracing"
    port: 15032
    targetPort: 15032
  - name: "tls"
    port: 15443
    targetPort: 15443

---
apiVersion: "autoscaling/v2beta1"
kind: "HorizontalPodAutoscaler"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-policy"
  labels:
    app: "mixer"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "mixer"
    release: "istio"
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: "apps/v1"
    kind: "Deployment"
    name: "istio-policy"
  metrics:
  - type: "Resource"
    resource:
      name: "cpu"
      targetAverageUtilization: 80

---
metadata:
  namespace: "istio-system"
  name: "tcpconnectionsopened"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "metric"
  params:
    monitored_resource_type: "\"UNSPECIFIED\""
    value: "1"
    dimensions:
      destination_version: "destination.labels[\"version\"] | \"unknown\""
      source_principal: "source.principal | \"unknown\""
      destination_workload: "destination.workload.name | \"unknown\""
      destination_app: "destination.labels[\"app\"] | \"unknown\""
      source_workload_namespace: "source.workload.namespace | \"unknown\""
      reporter: "conditional((context.reporter.kind | \"inbound\") == \"outbound\"\
        , \"source\", \"destination\")"
      destination_service_namespace: "destination.service.namespace | \"unknown\""
      destination_workload_namespace: "destination.workload.namespace | \"unknown\""
      source_version: "source.labels[\"version\"] | \"unknown\""
      response_flags: "context.proxy_error_code | \"-\""
      destination_service: "destination.service.host | \"unknown\""
      source_app: "source.labels[\"app\"] | \"unknown\""
      destination_service_name: "destination.service.name | \"unknown\""
      connection_security_policy: "conditional((context.reporter.kind | \"inbound\"\
        ) == \"outbound\", \"unknown\", conditional(connection.mtls | false, \"mutual_tls\"\
        , \"none\"))"
      source_workload: "source.workload.name | \"unknown\""
      destination_principal: "destination.principal | \"unknown\""

---
metadata:
  namespace: "istio-system"
  name: "requestsize"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "metric"
  params:
    monitored_resource_type: "\"UNSPECIFIED\""
    value: "request.size | 0"
    dimensions:
      destination_version: "destination.labels[\"version\"] | \"unknown\""
      response_code: "response.code | 200"
      source_principal: "source.principal | \"unknown\""
      destination_workload: "destination.workload.name | \"unknown\""
      destination_app: "destination.labels[\"app\"] | \"unknown\""
      source_workload_namespace: "source.workload.namespace | \"unknown\""
      reporter: "conditional((context.reporter.kind | \"inbound\") == \"outbound\"\
        , \"source\", \"destination\")"
      destination_service_namespace: "destination.service.namespace | \"unknown\""
      destination_workload_namespace: "destination.workload.namespace | \"unknown\""
      source_version: "source.labels[\"version\"] | \"unknown\""
      response_flags: "context.proxy_error_code | \"-\""
      destination_service: "destination.service.host | conditional((destination.service.name\
        \ | \"unknown\") == \"unknown\", \"unknown\", request.host)"
      source_app: "source.labels[\"app\"] | \"unknown\""
      grpc_response_status: "response.grpc_status | \"\""
      destination_service_name: "destination.service.name | \"unknown\""
      connection_security_policy: "conditional((context.reporter.kind | \"inbound\"\
        ) == \"outbound\", \"unknown\", conditional(connection.mtls | false, \"mutual_tls\"\
        , \"none\"))"
      source_workload: "source.workload.name | \"unknown\""
      destination_principal: "destination.principal | \"unknown\""
      request_protocol: "api.protocol | context.protocol | \"unknown\""

---
apiVersion: "policy/v1beta1"
kind: "PodDisruptionBudget"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-sidecar-injector"
  labels:
    app: "sidecarInjectorWebhook"
    app.kubernetes.io/name: "istio"
    istio: "sidecar-injector"
    release: "istio"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "sidecarInjectorWebhook"
      release: "istio"
      istio: "sidecar-injector"
    matchExpressions: []

---
metadata:
  namespace: "istio-system"
  name: "kubeattrgenrulerule"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "rule"
spec:
  actions:
  - handler: "kubernetesenv"
    instances:
    - "attributes"

---
apiVersion: "autoscaling/v2beta1"
kind: "HorizontalPodAutoscaler"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-telemetry"
  labels:
    app: "mixer"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "mixer"
    release: "istio"
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: "apps/v1"
    kind: "Deployment"
    name: "istio-telemetry"
  metrics:
  - type: "Resource"
    resource:
      name: "cpu"
      targetAverageUtilization: 80

---
apiVersion: "policy/v1beta1"
kind: "PodDisruptionBudget"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-galley"
  labels:
    app: "galley"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "galley"
    istio: "galley"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "galley"
      release: "istio"
      istio: "galley"
    matchExpressions: []

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-security-post-install-role-binding-istio-system"
  labels:
    app: "security"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "security"
    release: "istio"
subjects:
- kind: "ServiceAccount"
  name: "istio-security-post-install-account"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "istio-security-post-install-istio-system"

---
metadata:
  namespace: "istio-system"
  name: "tcpkubeattrgenrulerule"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "rule"
spec:
  match: "context.protocol == \"tcp\""
  actions:
  - handler: "kubernetesenv"
    instances:
    - "attributes"

---
metadata:
  namespace: "istio-system"
  name: "istio-policy"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "networking.istio.io/v1alpha3"
kind: "DestinationRule"
spec:
  host: "istio-policy.istio-system.svc.cluster.local"
  trafficPolicy:
    portLevelSettings:
    - port:
        number: 15004
      tls:
        mode: "ISTIO_MUTUAL"
    - port:
        number: 9091
      tls:
        mode: "DISABLE"
    connectionPool:
      http:
        http2MaxRequests: 10000
        maxRequestsPerConnection: 10000

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations:
    networking.istio.io/exportTo: "*"
  name: "istio-policy"
  labels:
    app: "mixer"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
    istio: "mixer"
    app.kubernetes.io/component: "deployment.istio-policy"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    istio-mixer-type: "policy"
    istio: "mixer"
    app.kubernetes.io/component: "deployment.istio-policy"
  ports:
  - name: "grpc-mixer"
    port: 9091
  - name: "grpc-mixer-mtls"
    port: 15004
  - name: "http-monitoring"
    port: 15014

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-mixer-service-account"
  labels:
    app: "mixer"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "mixer"
    release: "istio"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-citadel"
  labels:
    app: "security"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "security"
    istio: "citadel"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    istio: "citadel"
  ports:
  - name: "grpc-citadel"
    port: 8060
    protocol: "TCP"
    targetPort: 8060
  - name: "http-monitoring"
    port: 15014

---
kind: "ConfigMap"
apiVersion: "v1"
data:
  mesh: "# Set the following variable to true to disable policy checks by Mixer.\n\
    # Note that metrics will still be reported to Mixer.\ndisablePolicyChecks: true\n\
    \ndisableMixerHttpReports: false\n# reportBatchMaxEntries is the number of requests\
    \ that are batched before telemetry data is sent to the mixer server\nreportBatchMaxEntries:\
    \ 100\n# reportBatchMaxTime is the max waiting time before the telemetry data\
    \ of a request is sent to the mixer server\nreportBatchMaxTime: 1s\n\n# Set enableTracing\
    \ to false to disable request tracing.\nenableTracing: true\n\n# Set accessLogFile\
    \ to empty string to disable access log.\naccessLogFile: \"\"\n\n# If accessLogEncoding\
    \ is TEXT, value will be used directly as the log format\n# example: \"[%START_TIME%]\
    \ %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\\n\"\n# If AccessLogEncoding\
    \ is JSON, value will be parsed as map[string]string\n# example: '{\"start_time\"\
    : \"%START_TIME%\", \"req_method\": \"%REQ(:METHOD)%\"}'\n# Leave empty to use\
    \ default log format\naccessLogFormat: \"\"\n\n# Set accessLogEncoding to JSON\
    \ or TEXT to configure sidecar access log\naccessLogEncoding: 'TEXT'\n\nenableEnvoyAccessLogService:\
    \ false\nmixerCheckServer: istio-policy.istio-system.svc.cluster.local:9091\n\
    mixerReportServer: istio-telemetry.istio-system.svc.cluster.local:9091\n# policyCheckFailOpen\
    \ allows traffic in cases when the mixer policy service cannot be reached.\n#\
    \ Default is false which means the traffic is denied when the client is unable\
    \ to connect to Mixer.\npolicyCheckFailOpen: false\n# Let Pilot give ingresses\
    \ the public IP of the Istio ingressgateway\ningressService: istio-ingressgateway\n\
    \n# Default connect timeout for dynamic clusters generated by Pilot and returned\
    \ via XDS\nconnectTimeout: 10s\n\n# Automatic protocol detection uses a set of\
    \ heuristics to\n# determine whether the connection is using TLS or not (on the\n\
    # server side), as well as the application protocol being used\n# (e.g., http\
    \ vs tcp). These heuristics rely on the client sending\n# the first bits of data.\
    \ For server first protocols like MySQL,\n# MongoDB, etc., Envoy will timeout\
    \ on the protocol detection after\n# the specified period, defaulting to non mTLS\
    \ plain TCP\n# traffic. Set this field to tweak the period that Envoy will wait\n\
    # for the client to send the first bits of data. (MUST BE >=1ms)\nprotocolDetectionTimeout:\
    \ 100ms\n\n# DNS refresh rate for Envoy clusters of type STRICT_DNS\ndnsRefreshRate:\
    \ 300s\n\n# Unix Domain Socket through which envoy communicates with NodeAgent\
    \ SDS to get\n# key/cert for mTLS. Use secret-mount files instead of SDS if set\
    \ to empty.\nsdsUdsPath: \"\"\n\n# The trust domain corresponds to the trust root\
    \ of a system.\n# Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain\n\
    trustDomain: \"\"\n\n#  The trust domain aliases represent the aliases of trust_domain.\n\
    #  For example, if we have\n#  trustDomain: td1\n#  trustDomainAliases: [?td2?\
    , \"td3\"]\n#  Any service with the identity \"td1/ns/foo/sa/a-service-account\"\
    , \"td2/ns/foo/sa/a-service-account\",\n#  or \"td3/ns/foo/sa/a-service-account\"\
    \ will be treated the same in the Istio mesh.\ntrustDomainAliases:\n\n# If true,\
    \ automatically configure client side mTLS settings to match the corresponding\
    \ service's\n# server side mTLS authentication policy, when destination rule for\
    \ that service does not specify\n# TLS settings.\nenableAutoMtls: true\n\n# Set\
    \ the default behavior of the sidecar for handling outbound traffic from the application:\n\
    # ALLOW_ANY - outbound traffic to unknown destinations will be allowed, in case\
    \ there are no\n#   services or ServiceEntries for the destination port\n# REGISTRY_ONLY\
    \ - restrict outbound traffic to services defined in the service registry as well\n\
    #   as those defined through ServiceEntries\noutboundTrafficPolicy:\n  mode: ALLOW_ANY\n\
    localityLbSetting:\n  enabled: true\n# The namespace to treat as the administrative\
    \ root namespace for istio\n# configuration.\nrootNamespace: istio-system\n\n\
    # Configures DNS certificates provisioned through Chiron linked into Pilot.\n\
    certificates:\n  []\nconfigSources:\n- address: istio-galley.istio-system.svc:9901\n\
    \ndefaultConfig:\n  #\n  # TCP connection timeout between Envoy & the application,\
    \ and between Envoys.  Used for static clusters\n  # defined in Envoy's configuration\
    \ file\n  connectTimeout: 10s\n  #\n  ### ADVANCED SETTINGS #############\n  #\
    \ Where should envoy's configuration be stored in the istio-proxy container\n\
    \  configPath: \"/etc/istio/proxy\"\n  binaryPath: \"/usr/local/bin/envoy\"\n\
    \  # The pseudo service name used for Envoy.\n  serviceCluster: istio-proxy\n\
    \  # These settings that determine how long an old Envoy\n  # process should be\
    \ kept alive after an occasional reload.\n  drainDuration: 45s\n  parentShutdownDuration:\
    \ 1m0s\n  #\n  # The mode used to redirect inbound connections to Envoy. This\
    \ setting\n  # has no effect on outbound traffic: iptables REDIRECT is always\
    \ used for\n  # outbound connections.\n  # If \"REDIRECT\", use iptables REDIRECT\
    \ to NAT and redirect to Envoy.\n  # The \"REDIRECT\" mode loses source addresses\
    \ during redirection.\n  # If \"TPROXY\", use iptables TPROXY to redirect to Envoy.\n\
    \  # The \"TPROXY\" mode preserves both the source and destination IP\n  # addresses\
    \ and ports, so that they can be used for advanced filtering\n  # and manipulation.\n\
    \  # The \"TPROXY\" mode also configures the sidecar to run with the\n  # CAP_NET_ADMIN\
    \ capability, which is required to use TPROXY.\n  #interceptionMode: REDIRECT\n\
    \  #\n  # Port where Envoy listens (on local host) for admin commands\n  # You\
    \ can exec into the istio-proxy container in a pod and\n  # curl the admin port\
    \ (curl http://localhost:15000/) to obtain\n  # diagnostic information from Envoy.\
    \ See\n  # https://lyft.github.io/envoy/docs/operations/admin.html\n  # for more\
    \ details\n  proxyAdminPort: 15000\n  #\n  # Set concurrency to a specific number\
    \ to control the number of Proxy worker threads.\n  # If set to 0 (default), then\
    \ start worker thread for each CPU thread/core.\n  concurrency: 2\n  #\n  tracing:\n\
    \    zipkin:\n      # Address of the Zipkin collector\n      address: zipkin.istio-system:9411\n\
    \  #\n  # Mutual TLS authentication between sidecars and istio control plane.\n\
    \  controlPlaneAuthPolicy: NONE\n  #\n  # Address where istio Pilot service is\
    \ running\n  discoveryAddress: istio-pilot.istio-system:15010"
  meshNetworks: "networks: {}"
binaryData: {}
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio"
  labels:
    app: "istio"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "istio"
    release: "istio"

---
metadata:
  namespace: "istio-system"
  name: "istioproxy"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "attributemanifest"
spec:
  attributes:
    request.scheme:
      valueType: "STRING"
    quota.cache_hit:
      valueType: "BOOL"
    request.auth.presenter:
      valueType: "STRING"
    connection.duration:
      valueType: "DURATION"
    destination.uid:
      valueType: "STRING"
    response.total_size:
      valueType: "INT64"
    response.duration:
      valueType: "DURATION"
    connection.mtls:
      valueType: "BOOL"
    rbac.permissive.response_code:
      valueType: "STRING"
    context.reporter.uid:
      valueType: "STRING"
    origin.uid:
      valueType: "STRING"
    request.url_path:
      valueType: "STRING"
    response.size:
      valueType: "INT64"
    context.reporter.local:
      valueType: "BOOL"
    request.time:
      valueType: "TIMESTAMP"
    context.proxy_version:
      valueType: "STRING"
    request.query_params:
      valueType: "STRING_MAP"
    request.auth.audiences:
      valueType: "STRING"
    context.proxy_error_code:
      valueType: "STRING"
    destination.principal:
      valueType: "STRING"
    request.auth.principal:
      valueType: "STRING"
    context.reporter.kind:
      valueType: "STRING"
    api.protocol:
      valueType: "STRING"
    api.version:
      valueType: "STRING"
    connection.id:
      valueType: "STRING"
    destination.port:
      valueType: "INT64"
    request.reason:
      valueType: "STRING"
    connection.requested_server_name:
      valueType: "STRING"
    context.time:
      valueType: "TIMESTAMP"
    response.code:
      valueType: "INT64"
    connection.event:
      valueType: "STRING"
    request.host:
      valueType: "STRING"
    connection.sent.bytes:
      valueType: "INT64"
    source.uid:
      valueType: "STRING"
    connection.sent.bytes_total:
      valueType: "INT64"
    request.total_size:
      valueType: "INT64"
    request.referer:
      valueType: "STRING"
    check.cache_hit:
      valueType: "BOOL"
    response.grpc_message:
      valueType: "STRING"
    request.path:
      valueType: "STRING"
    context.timestamp:
      valueType: "TIMESTAMP"
    request.auth.raw_claims:
      valueType: "STRING"
    response.grpc_status:
      valueType: "STRING"
    connection.received.bytes_total:
      valueType: "INT64"
    response.time:
      valueType: "TIMESTAMP"
    check.error_code:
      valueType: "INT64"
    source.principal:
      valueType: "STRING"
    connection.received.bytes:
      valueType: "INT64"
    request.api_key:
      valueType: "STRING"
    rbac.permissive.effective_policy_id:
      valueType: "STRING"
    context.protocol:
      valueType: "STRING"
    request.method:
      valueType: "STRING"
    api.operation:
      valueType: "STRING"
    request.auth.claims:
      valueType: "STRING_MAP"
    request.id:
      valueType: "STRING"
    origin.ip:
      valueType: "IP_ADDRESS"
    request.headers:
      valueType: "STRING_MAP"
    api.service:
      valueType: "STRING"
    request.useragent:
      valueType: "STRING"
    origin.user:
      valueType: "STRING"
    response.headers:
      valueType: "STRING_MAP"
    request.size:
      valueType: "INT64"
    source.user:
      valueType: "STRING"
    check.error_message:
      valueType: "STRING"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-security-post-install-account"
  labels:
    app: "security"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "security"
    release: "istio"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  verbs:
  - "create"
  - "get"
  - "update"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "secrets"
  verbs:
  - "create"
  - "get"
  - "watch"
  - "list"
  - "update"
  - "delete"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "serviceaccounts"
  - "services"
  - "namespaces"
  verbs:
  - "get"
  - "watch"
  - "list"
- apiGroups:
  - "authentication.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "tokenreviews"
  verbs:
  - "create"
metadata:
  annotations: {}
  name: "istio-citadel-istio-system"
  labels:
    app: "security"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "security"
    release: "istio"

---
kind: "ConfigMap"
apiVersion: "v1"
data:
  prometheus.yml: "global:\n  scrape_interval: 15s\nscrape_configs:\n\n- job_name:\
    \ 'istio-mesh'\n  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n\
    \      names:\n      - istio-system\n\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n   \
    \ action: keep\n    regex: istio-telemetry;prometheus\n\n# Scrape config for envoy\
    \ stats\n- job_name: 'envoy-stats'\n  metrics_path: /stats/prometheus\n  kubernetes_sd_configs:\n\
    \  - role: pod\n\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_container_port_name]\n\
    \    action: keep\n    regex: '.*-envoy-prom'\n  - source_labels: [__address__,\
    \ __meta_kubernetes_pod_annotation_prometheus_io_port]\n    action: replace\n\
    \    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:15090\n    target_label:\
    \ __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n\
    \  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label:\
    \ namespace\n  - source_labels: [__meta_kubernetes_pod_name]\n    action: replace\n\
    \    target_label: pod_name\n\n- job_name: 'istio-policy'\n  kubernetes_sd_configs:\n\
    \  - role: endpoints\n    namespaces:\n      names:\n      - istio-system\n\n\n\
    \  relabel_configs:\n  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n\
    \    action: keep\n    regex: istio-policy;http-monitoring\n\n- job_name: 'istio-telemetry'\n\
    \  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n      names:\n\
    \      - istio-system\n\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_service_name,\
    \ __meta_kubernetes_endpoint_port_name]\n    action: keep\n    regex: istio-telemetry;http-monitoring\n\
    \n- job_name: 'pilot'\n  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n\
    \      names:\n      - istio-system\n\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n   \
    \ action: keep\n    regex: istio-pilot;http-monitoring\n\n- job_name: 'galley'\n\
    \  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n      names:\n\
    \      - istio-system\n\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_service_name,\
    \ __meta_kubernetes_endpoint_port_name]\n    action: keep\n    regex: istio-galley;http-monitoring\n\
    \n- job_name: 'citadel'\n  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n\
    \      names:\n      - istio-system\n\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n   \
    \ action: keep\n    regex: istio-citadel;http-monitoring\n\n- job_name: 'sidecar-injector'\n\
    \n  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n      names:\n\
    \      - istio-system\n\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_service_name,\
    \ __meta_kubernetes_endpoint_port_name]\n    action: keep\n    regex: istio-sidecar-injector;http-monitoring\n\
    \n# scrape config for API servers\n- job_name: 'kubernetes-apiservers'\n  kubernetes_sd_configs:\n\
    \  - role: endpoints\n    namespaces:\n      names:\n      - default\n  scheme:\
    \ https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\
    \  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  relabel_configs:\n\
    \  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n\
    \    action: keep\n    regex: kubernetes;https\n\n# scrape config for nodes (kubelet)\n\
    - job_name: 'kubernetes-nodes'\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\
    \  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  kubernetes_sd_configs:\n\
    \  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n\
    \  - target_label: __address__\n    replacement: kubernetes.default.svc:443\n\
    \  - source_labels: [__meta_kubernetes_node_name]\n    regex: (.+)\n    target_label:\
    \ __metrics_path__\n    replacement: /api/v1/nodes/${1}/proxy/metrics\n\n# Scrape\
    \ config for Kubelet cAdvisor.\n#\n# This is required for Kubernetes 1.7.3 and\
    \ later, where cAdvisor metrics\n# (those whose names begin with 'container_')\
    \ have been removed from the\n# Kubelet metrics endpoint.  This job scrapes the\
    \ cAdvisor endpoint to\n# retrieve those metrics.\n#\n# In Kubernetes 1.7.0-1.7.2,\
    \ these metrics are only exposed on the cAdvisor\n# HTTP endpoint; use \"replacement:\
    \ /api/v1/nodes/${1}:4194/proxy/metrics\"\n# in that case (and ensure cAdvisor's\
    \ HTTP server hasn't been disabled with\n# the --cadvisor-port=0 Kubelet flag).\n\
    #\n# This job is not necessary and should be removed in Kubernetes 1.6 and\n#\
    \ earlier versions, or it will cause the metrics to be scraped twice.\n- job_name:\
    \ 'kubernetes-cadvisor'\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\
    \  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  kubernetes_sd_configs:\n\
    \  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n\
    \  - target_label: __address__\n    replacement: kubernetes.default.svc:443\n\
    \  - source_labels: [__meta_kubernetes_node_name]\n    regex: (.+)\n    target_label:\
    \ __metrics_path__\n    replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n\
    \n# scrape config for service endpoints.\n- job_name: 'kubernetes-service-endpoints'\n\
    \  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n    action: keep\n\
    \    regex: true\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n\
    \    action: replace\n    target_label: __scheme__\n    regex: (https?)\n  - source_labels:\
    \ [__meta_kubernetes_service_annotation_prometheus_io_path]\n    action: replace\n\
    \    target_label: __metrics_path__\n    regex: (.+)\n  - source_labels: [__address__,\
    \ __meta_kubernetes_service_annotation_prometheus_io_port]\n    action: replace\n\
    \    target_label: __address__\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement:\
    \ $1:$2\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n\
    \  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label:\
    \ kubernetes_namespace\n  - source_labels: [__meta_kubernetes_service_name]\n\
    \    action: replace\n    target_label: kubernetes_name\n\n- job_name: 'kubernetes-pods'\n\
    \  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:  # If first two labels\
    \ are present, pod should be scraped  by the istio-secure job.\n  - source_labels:\
    \ [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n    action: keep\n\
    \    regex: true\n  # Keep target if there's no sidecar or if prometheus.io/scheme\
    \ is explicitly set to \"http\"\n  - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status,\
    \ __meta_kubernetes_pod_annotation_prometheus_io_scheme]\n    action: keep\n \
    \   regex: ((;.*)|(.*;http))\n  - source_labels: [__meta_kubernetes_pod_annotation_istio_mtls]\n\
    \    action: drop\n    regex: (true)\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n\
    \    action: replace\n    target_label: __metrics_path__\n    regex: (.+)\n  -\
    \ source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n\
    \    action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n\
    \    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n\
    \  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label:\
    \ namespace\n  - source_labels: [__meta_kubernetes_pod_name]\n    action: replace\n\
    \    target_label: pod_name\n\n- job_name: 'kubernetes-pods-istio-secure'\n  scheme:\
    \ https\n  tls_config:\n    ca_file: /etc/istio-certs/root-cert.pem\n    cert_file:\
    \ /etc/istio-certs/cert-chain.pem\n    key_file: /etc/istio-certs/key.pem\n  \
    \  insecure_skip_verify: true  # prometheus does not support secure naming.\n\
    \  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n    action: keep\n\
    \    regex: true\n  # sidecar status annotation is added by sidecar injector and\n\
    \  # istio_workload_mtls_ability can be specifically placed on a pod to indicate\
    \ its ability to receive mtls traffic.\n  - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status,\
    \ __meta_kubernetes_pod_annotation_istio_mtls]\n    action: keep\n    regex: (([^;]+);([^;]*))|(([^;]*);(true))\n\
    \  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]\n\
    \    action: drop\n    regex: (http)\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n\
    \    action: replace\n    target_label: __metrics_path__\n    regex: (.+)\n  -\
    \ source_labels: [__address__]  # Only keep address that is host:port\n    action:\
    \ keep    # otherwise an extra target with ':443' is added for https scheme\n\
    \    regex: ([^:]+):(\\d+)\n  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n\
    \    action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n\
    \    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n\
    \  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label:\
    \ namespace\n  - source_labels: [__meta_kubernetes_pod_name]\n    action: replace\n\
    \    target_label: pod_name"
binaryData: {}
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "prometheus"
  labels:
    app: "prometheus"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "prometheus"
    release: "istio"

---
metadata:
  namespace: "istio-system"
  name: "kubernetes"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "attributemanifest"
spec:
  attributes:
    source.workload.name:
      valueType: "STRING"
    source.name:
      valueType: "STRING"
    source.workload.uid:
      valueType: "STRING"
    destination.name:
      valueType: "STRING"
    destination.workload.uid:
      valueType: "STRING"
    destination.metadata:
      valueType: "STRING_MAP"
    destination.service.namespace:
      valueType: "STRING"
    destination.service.host:
      valueType: "STRING"
    source.ip:
      valueType: "IP_ADDRESS"
    source.owner:
      valueType: "STRING"
    source.serviceAccount:
      valueType: "STRING"
    destination.container.name:
      valueType: "STRING"
    destination.namespace:
      valueType: "STRING"
    destination.service.uid:
      valueType: "STRING"
    source.workload.namespace:
      valueType: "STRING"
    destination.workload.namespace:
      valueType: "STRING"
    source.namespace:
      valueType: "STRING"
    source.labels:
      valueType: "STRING_MAP"
    destination.ip:
      valueType: "IP_ADDRESS"
    destination.workload.name:
      valueType: "STRING"
    destination.service.name:
      valueType: "STRING"
    source.services:
      valueType: "STRING"
    destination.serviceAccount:
      valueType: "STRING"
    destination.labels:
      valueType: "STRING_MAP"
    source.metadata:
      valueType: "STRING_MAP"
    destination.owner:
      valueType: "STRING"

---
apiVersion: "batch/v1"
kind: "Job"
spec:
  backoffLimit: 6
  parallelism: 1
  completions: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      name: "istio-security-post-install"
      labels:
        app: "security"
        heritage: "Tiller"
        chart: "security"
        release: "istio"
        app.kubernetes.io/component: "job.istio-security-post-install-1.5.4"
    spec:
      restartPolicy: "OnFailure"
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "istio-security-post-install-account"
      volumes:
      - name: "tmp-configmap-security"
        configMap:
          name: "istio-security-custom-resources"
      containers:
      - name: "kubectl"
        image: "docker.io/istio/kubectl:1.5.4"
        command:
        - "/bin/bash"
        - "/tmp/security/run.sh"
        - "/tmp/security/custom-resources.yaml"
        args: []
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
        - name: "tmp-configmap-security"
          mountPath: "/tmp/security"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"
metadata:
  namespace: "istio-system"
  annotations:
    helm.sh/hook-delete-policy: "hook-succeeded"
    helm.sh/hook: "post-install,post-upgrade"
  name: "istio-security-post-install-1.5.4"
  labels:
    app: "security"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "security"
    app.kubernetes.io/component: "job.istio-security-post-install-1.5.4"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-sidecar-injector"
  labels:
    app: "sidecarInjectorWebhook"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "sidecarInjectorWebhook"
    istio: "sidecar-injector"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    istio: "sidecar-injector"
  ports:
  - name: "https-inject"
    port: 443
    targetPort: 9443
  - name: "http-monitoring"
    port: 15014

---
metadata:
  namespace: "istio-system"
  name: "prometheus"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "handler"
spec:
  compiledAdapter: "prometheus"
  params:
    metrics:
    - instance_name: "requestcount.instance.istio-system"
      kind: "COUNTER"
      name: "requests_total"
      label_names:
      - "reporter"
      - "source_app"
      - "source_principal"
      - "source_workload"
      - "source_workload_namespace"
      - "source_version"
      - "destination_app"
      - "destination_principal"
      - "destination_workload"
      - "destination_workload_namespace"
      - "destination_version"
      - "destination_service"
      - "destination_service_name"
      - "destination_service_namespace"
      - "request_protocol"
      - "response_code"
      - "grpc_response_status"
      - "response_flags"
      - "connection_security_policy"
    - instance_name: "requestduration.instance.istio-system"
      kind: "DISTRIBUTION"
      buckets:
        explicit_buckets:
          bounds:
          - 0.005
          - 0.01
          - 0.025
          - 0.05
          - 0.1
          - 0.25
          - 0.5
          - 1
          - 2.5
          - 5
          - 10
      name: "request_duration_seconds"
      label_names:
      - "reporter"
      - "source_app"
      - "source_principal"
      - "source_workload"
      - "source_workload_namespace"
      - "source_version"
      - "destination_app"
      - "destination_principal"
      - "destination_workload"
      - "destination_workload_namespace"
      - "destination_version"
      - "destination_service"
      - "destination_service_name"
      - "destination_service_namespace"
      - "request_protocol"
      - "response_code"
      - "grpc_response_status"
      - "response_flags"
      - "connection_security_policy"
    - instance_name: "requestsize.instance.istio-system"
      kind: "DISTRIBUTION"
      buckets:
        exponentialBuckets:
          growthFactor: 10
          scale: 1
          numFiniteBuckets: 8
      name: "request_bytes"
      label_names:
      - "reporter"
      - "source_app"
      - "source_principal"
      - "source_workload"
      - "source_workload_namespace"
      - "source_version"
      - "destination_app"
      - "destination_principal"
      - "destination_workload"
      - "destination_workload_namespace"
      - "destination_version"
      - "destination_service"
      - "destination_service_name"
      - "destination_service_namespace"
      - "request_protocol"
      - "response_code"
      - "grpc_response_status"
      - "response_flags"
      - "connection_security_policy"
    - instance_name: "responsesize.instance.istio-system"
      kind: "DISTRIBUTION"
      buckets:
        exponentialBuckets:
          growthFactor: 10
          scale: 1
          numFiniteBuckets: 8
      name: "response_bytes"
      label_names:
      - "reporter"
      - "source_app"
      - "source_principal"
      - "source_workload"
      - "source_workload_namespace"
      - "source_version"
      - "destination_app"
      - "destination_principal"
      - "destination_workload"
      - "destination_workload_namespace"
      - "destination_version"
      - "destination_service"
      - "destination_service_name"
      - "destination_service_namespace"
      - "request_protocol"
      - "response_code"
      - "grpc_response_status"
      - "response_flags"
      - "connection_security_policy"
    - instance_name: "tcpbytesent.instance.istio-system"
      kind: "COUNTER"
      name: "tcp_sent_bytes_total"
      label_names:
      - "reporter"
      - "source_app"
      - "source_principal"
      - "source_workload"
      - "source_workload_namespace"
      - "source_version"
      - "destination_app"
      - "destination_principal"
      - "destination_workload"
      - "destination_workload_namespace"
      - "destination_version"
      - "destination_service"
      - "destination_service_name"
      - "destination_service_namespace"
      - "connection_security_policy"
      - "response_flags"
    - instance_name: "tcpbytereceived.instance.istio-system"
      kind: "COUNTER"
      name: "tcp_received_bytes_total"
      label_names:
      - "reporter"
      - "source_app"
      - "source_principal"
      - "source_workload"
      - "source_workload_namespace"
      - "source_version"
      - "destination_app"
      - "destination_principal"
      - "destination_workload"
      - "destination_workload_namespace"
      - "destination_version"
      - "destination_service"
      - "destination_service_name"
      - "destination_service_namespace"
      - "connection_security_policy"
      - "response_flags"
    - instance_name: "tcpconnectionsopened.instance.istio-system"
      kind: "COUNTER"
      name: "tcp_connections_opened_total"
      label_names:
      - "reporter"
      - "source_app"
      - "source_principal"
      - "source_workload"
      - "source_workload_namespace"
      - "source_version"
      - "destination_app"
      - "destination_principal"
      - "destination_workload"
      - "destination_workload_namespace"
      - "destination_version"
      - "destination_service"
      - "destination_service_name"
      - "destination_service_namespace"
      - "connection_security_policy"
      - "response_flags"
    - instance_name: "tcpconnectionsclosed.instance.istio-system"
      kind: "COUNTER"
      name: "tcp_connections_closed_total"
      label_names:
      - "reporter"
      - "source_app"
      - "source_principal"
      - "source_workload"
      - "source_workload_namespace"
      - "source_version"
      - "destination_app"
      - "destination_principal"
      - "destination_workload"
      - "destination_workload_namespace"
      - "destination_version"
      - "destination_service"
      - "destination_service_name"
      - "destination_service_namespace"
      - "connection_security_policy"
      - "response_flags"
    metricsExpirationPolicy:
      metricsExpiryDuration: "10m"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-multi"
  labels:
    app.kubernetes.io/name: "istio"
    chart: "istio-1.5.4"
subjects:
- kind: "ServiceAccount"
  name: "istio-multi"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "istio-reader"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-galley"
  labels:
    app: "galley"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "galley"
    istio: "galley"
    app.kubernetes.io/component: "deployment.istio-galley"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      istio: "galley"
      app.kubernetes.io/component: "deployment.istio-galley"
    matchExpressions: []
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: "galley"
        release: "istio"
        heritage: "Tiller"
        chart: "galley"
        istio: "galley"
        app.kubernetes.io/component: "deployment.istio-galley"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "istio-galley-service-account"
      volumes:
      - name: "certs"
        secret:
          secretName: "istio.istio-galley-service-account"
      - name: "config"
        emptyDir:
          medium: "Memory"
      - name: "mesh-config"
        configMap:
          name: "istio"
      containers:
      - name: "galley"
        image: "docker.io/istio/galley:1.5.4"
        command:
        - "/usr/local/bin/galley"
        - "server"
        - "--meshConfigFile=/etc/mesh-config/mesh"
        - "--livenessProbeInterval=1s"
        - "--livenessProbePath=/tmp/healthliveness"
        - "--readinessProbePath=/tmp/healthready"
        - "--readinessProbeInterval=1s"
        - "--deployment-namespace=istio-system"
        - "--insecure=true"
        - "--enable-reconcileWebhookConfiguration=true"
        - "--monitoringPort=15014"
        - "--log_output_level=default:info"
        args: []
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9443
          protocol: "TCP"
        - containerPort: 15014
          protocol: "TCP"
        - containerPort: 9901
          protocol: "TCP"
        volumeMounts:
        - name: "certs"
          readOnly: true
          mountPath: "/etc/certs"
        - name: "config"
          readOnly: true
          mountPath: "/etc/config"
        - name: "mesh-config"
          readOnly: true
          mountPath: "/etc/mesh-config"
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          exec:
            command:
            - "/usr/local/bin/galley"
            - "probe"
            - "--probe-path=/tmp/healthliveness"
            - "--interval=10s"
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          exec:
            command:
            - "/usr/local/bin/galley"
            - "probe"
            - "--probe-path=/tmp/healthready"
            - "--interval=10s"
        resources:
          limits: {}
          requests:
            cpu: "10m"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"

---
metadata:
  namespace: "istio-system"
  name: "tcpbytereceived"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "metric"
  params:
    monitored_resource_type: "\"UNSPECIFIED\""
    value: "connection.received.bytes | 0"
    dimensions:
      destination_version: "destination.labels[\"version\"] | \"unknown\""
      source_principal: "source.principal | \"unknown\""
      destination_workload: "destination.workload.name | \"unknown\""
      destination_app: "destination.labels[\"app\"] | \"unknown\""
      source_workload_namespace: "source.workload.namespace | \"unknown\""
      reporter: "conditional((context.reporter.kind | \"inbound\") == \"outbound\"\
        , \"source\", \"destination\")"
      destination_service_namespace: "destination.service.namespace | \"unknown\""
      destination_workload_namespace: "destination.workload.namespace | \"unknown\""
      source_version: "source.labels[\"version\"] | \"unknown\""
      response_flags: "context.proxy_error_code | \"-\""
      destination_service: "destination.service.host | \"unknown\""
      source_app: "source.labels[\"app\"] | \"unknown\""
      destination_service_name: "destination.service.name | \"unknown\""
      connection_security_policy: "conditional((context.reporter.kind | \"inbound\"\
        ) == \"outbound\", \"unknown\", conditional(connection.mtls | false, \"mutual_tls\"\
        , \"none\"))"
      source_workload: "source.workload.name | \"unknown\""
      destination_principal: "destination.principal | \"unknown\""

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-ingressgateway-np"
  labels:
    app: "istio-ingressgateway"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "gateways"
    istio: "ingressgateway"
    app.kubernetes.io/component: "deployment.istio-ingressgateway"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "NodePort"
  selector:
    app: "istio-ingressgateway"
    istio: "ingressgateway"
    release: "istio"
    app.kubernetes.io/component: "deployment.istio-ingressgateway"
  ports:
  - name: "status-port-np"
    port: 15020
    targetPort: 15020
  - name: "http2-np"
    nodePort: 31380
    port: 80
    targetPort: 80
  - name: "https-np"
    nodePort: 31390
    port: 443
  - name: "tcp-np"
    nodePort: 31400
    port: 31400
  - name: "https-kiali-np"
    port: 15029
    targetPort: 15029
  - name: "https-prometheus-np"
    port: 15030
    targetPort: 15030
  - name: "https-grafana-np"
    port: 15031
    targetPort: 15031
  - name: "https-tracing-np"
    port: 15032
    targetPort: 15032
  - name: "tls-np"
    port: 15443
    targetPort: 15443

---
metadata:
  namespace: "istio-system"
  name: "requestduration"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "metric"
  params:
    monitored_resource_type: "\"UNSPECIFIED\""
    value: "response.duration | \"0ms\""
    dimensions:
      destination_version: "destination.labels[\"version\"] | \"unknown\""
      response_code: "response.code | 200"
      source_principal: "source.principal | \"unknown\""
      destination_workload: "destination.workload.name | \"unknown\""
      destination_app: "destination.labels[\"app\"] | \"unknown\""
      source_workload_namespace: "source.workload.namespace | \"unknown\""
      reporter: "conditional((context.reporter.kind | \"inbound\") == \"outbound\"\
        , \"source\", \"destination\")"
      destination_service_namespace: "destination.service.namespace | \"unknown\""
      destination_workload_namespace: "destination.workload.namespace | \"unknown\""
      source_version: "source.labels[\"version\"] | \"unknown\""
      response_flags: "context.proxy_error_code | \"-\""
      destination_service: "destination.service.host | conditional((destination.service.name\
        \ | \"unknown\") == \"unknown\", \"unknown\", request.host)"
      source_app: "source.labels[\"app\"] | \"unknown\""
      grpc_response_status: "response.grpc_status | \"\""
      destination_service_name: "destination.service.name | \"unknown\""
      connection_security_policy: "conditional((context.reporter.kind | \"inbound\"\
        ) == \"outbound\", \"unknown\", conditional(connection.mtls | false, \"mutual_tls\"\
        , \"none\"))"
      source_workload: "source.workload.name | \"unknown\""
      destination_principal: "destination.principal | \"unknown\""
      request_protocol: "api.protocol | context.protocol | \"unknown\""

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-sidecar-injector-admin-role-binding-istio-system"
  labels:
    app: "sidecarInjectorWebhook"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "sidecarInjectorWebhook"
    istio: "sidecar-injector"
subjects:
- kind: "ServiceAccount"
  name: "istio-sidecar-injector-service-account"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "istio-sidecar-injector-istio-system"

---
apiVersion: "autoscaling/v2beta1"
kind: "HorizontalPodAutoscaler"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-pilot"
  labels:
    app: "pilot"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "pilot"
    release: "istio"
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: "apps/v1"
    kind: "Deployment"
    name: "istio-pilot"
  metrics:
  - type: "Resource"
    resource:
      name: "cpu"
      targetAverageUtilization: 80

---
metadata:
  namespace: "istio-system"
  name: "requestcount"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "metric"
  params:
    monitored_resource_type: "\"UNSPECIFIED\""
    value: "1"
    dimensions:
      destination_version: "destination.labels[\"version\"] | \"unknown\""
      response_code: "response.code | 200"
      source_principal: "source.principal | \"unknown\""
      destination_workload: "destination.workload.name | \"unknown\""
      destination_app: "destination.labels[\"app\"] | \"unknown\""
      source_workload_namespace: "source.workload.namespace | \"unknown\""
      reporter: "conditional((context.reporter.kind | \"inbound\") == \"outbound\"\
        , \"source\", \"destination\")"
      destination_service_namespace: "destination.service.namespace | \"unknown\""
      destination_workload_namespace: "destination.workload.namespace | \"unknown\""
      source_version: "source.labels[\"version\"] | \"unknown\""
      response_flags: "context.proxy_error_code | \"-\""
      destination_service: "destination.service.host | conditional((destination.service.name\
        \ | \"unknown\") == \"unknown\", \"unknown\", request.host)"
      source_app: "source.labels[\"app\"] | \"unknown\""
      grpc_response_status: "response.grpc_status | \"\""
      destination_service_name: "destination.service.name | \"unknown\""
      connection_security_policy: "conditional((context.reporter.kind | \"inbound\"\
        ) == \"outbound\", \"unknown\", conditional(connection.mtls | false, \"mutual_tls\"\
        , \"none\"))"
      source_workload: "source.workload.name | \"unknown\""
      destination_principal: "destination.principal | \"unknown\""
      request_protocol: "api.protocol | context.protocol | \"unknown\""

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  - "endpoints"
  - "namespaces"
  - "nodes"
  - "pods"
  - "pods/log"
  - "replicationcontrollers"
  - "services"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "deployments"
  - "replicasets"
  - "statefulsets"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "autoscaling"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "horizontalpodautoscalers"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "batch"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "cronjobs"
  - "jobs"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "config.istio.io"
  - "networking.istio.io"
  - "authentication.istio.io"
  - "rbac.istio.io"
  - "security.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "*"
  verbs:
  - "create"
  - "delete"
  - "get"
  - "list"
  - "patch"
  - "watch"
- apiGroups:
  - "monitoring.kiali.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "monitoringdashboards"
  verbs:
  - "get"
  - "list"
metadata:
  annotations: {}
  name: "kiali"
  labels:
    app: "kiali"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "kiali"
    release: "istio"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-reader"
  labels:
    app.kubernetes.io/name: "istio"
    chart: "istio-1.5.4"
subjects:
- kind: "ServiceAccount"
  name: "istio-reader-service-account"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "istio-reader"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-citadel-istio-system"
  labels:
    app: "security"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "security"
    release: "istio"
subjects:
- kind: "ServiceAccount"
  name: "istio-citadel-service-account"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "istio-citadel-istio-system"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  - "endpoints"
  - "namespaces"
  - "nodes"
  - "pods"
  - "pods/log"
  - "replicationcontrollers"
  - "services"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "deployments"
  - "replicasets"
  - "statefulsets"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "autoscaling"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "horizontalpodautoscalers"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "batch"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "cronjobs"
  - "jobs"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "config.istio.io"
  - "networking.istio.io"
  - "authentication.istio.io"
  - "rbac.istio.io"
  - "security.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "*"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "monitoring.kiali.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "monitoringdashboards"
  verbs:
  - "get"
  - "list"
metadata:
  annotations: {}
  name: "kiali-viewer"
  labels:
    app: "kiali"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "kiali"
    release: "istio"

---
kind: "ConfigMap"
apiVersion: "v1"
data:
  config.yaml: "istio_namespace: istio-system\ndeployment:\n  accessible_namespaces:\
    \ ['**']\nlogin_token:\n  signing_key: \"s9Pe3aXjjD\"\nauth:\n  strategy: login\n\
    server:\n  port: 20001\n  web_root: /kiali\nexternal_services:\n  tracing:\n \
    \   url: \n    in_cluster_url: http://tracing/jaeger\n  grafana:\n    url: \n\
    \    in_cluster_url: http://grafana:3000\n  prometheus:\n    url: http://prometheus:9090\n"
binaryData: {}
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "kiali"
  labels:
    app: "kiali"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "kiali"
    release: "istio"

---
apiVersion: "policy/v1beta1"
kind: "PodDisruptionBudget"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-citadel"
  labels:
    app: "security"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "security"
    istio: "citadel"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "security"
      release: "istio"
      istio: "citadel"
    matchExpressions: []

---
metadata:
  namespace: "istio-system"
  name: "attributes"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "kubernetes"
  params:
    destination_port: "destination.port | 0"
    source_uid: "source.uid | \"\""
    destination_uid: "destination.uid | \"\""
    source_ip: "source.ip | ip(\"0.0.0.0\")"
  attributeBindings:
    source.workload.name: "$out.source_workload_name | \"unknown\""
    source.name: "$out.source_pod_name | \"unknown\""
    destination.container.name: "$out.destination_container_name | \"unknown\""
    destination.namespace: "$out.destination_namespace | \"default\""
    source.workload.namespace: "$out.source_workload_namespace | \"unknown\""
    destination.workload.namespace: "$out.destination_workload_namespace | \"unknown\""
    source.workload.uid: "$out.source_workload_uid | \"unknown\""
    destination.name: "$out.destination_pod_name | \"unknown\""
    destination.workload.uid: "$out.destination_workload_uid | \"unknown\""
    source.namespace: "$out.source_namespace | \"default\""
    source.labels: "$out.source_labels | emptyStringMap()"
    destination.ip: "$out.destination_pod_ip | ip(\"0.0.0.0\")"
    destination.workload.name: "$out.destination_workload_name | \"unknown\""
    destination.uid: "$out.destination_pod_uid | \"unknown\""
    source.uid: "$out.source_pod_uid | \"unknown\""
    source.ip: "$out.source_pod_ip | ip(\"0.0.0.0\")"
    destination.serviceAccount: "$out.destination_service_account_name | \"unknown\""
    destination.labels: "$out.destination_labels | emptyStringMap()"
    source.owner: "$out.source_owner | \"unknown\""
    destination.owner: "$out.destination_owner | \"unknown\""
    source.serviceAccount: "$out.source_service_account_name | \"unknown\""

---
metadata:
  namespace: "istio-system"
  name: "tcpbytesent"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "metric"
  params:
    monitored_resource_type: "\"UNSPECIFIED\""
    value: "connection.sent.bytes | 0"
    dimensions:
      destination_version: "destination.labels[\"version\"] | \"unknown\""
      source_principal: "source.principal | \"unknown\""
      destination_workload: "destination.workload.name | \"unknown\""
      destination_app: "destination.labels[\"app\"] | \"unknown\""
      source_workload_namespace: "source.workload.namespace | \"unknown\""
      reporter: "conditional((context.reporter.kind | \"inbound\") == \"outbound\"\
        , \"source\", \"destination\")"
      destination_service_namespace: "destination.service.namespace | \"unknown\""
      destination_workload_namespace: "destination.workload.namespace | \"unknown\""
      source_version: "source.labels[\"version\"] | \"unknown\""
      response_flags: "context.proxy_error_code | \"-\""
      destination_service: "destination.service.host | \"unknown\""
      source_app: "source.labels[\"app\"] | \"unknown\""
      destination_service_name: "destination.service.name | \"unknown\""
      connection_security_policy: "conditional((context.reporter.kind | \"inbound\"\
        ) == \"outbound\", \"unknown\", conditional(connection.mtls | false, \"mutual_tls\"\
        , \"none\"))"
      source_workload: "source.workload.name | \"unknown\""
      destination_principal: "destination.principal | \"unknown\""

---
apiVersion: "policy/v1beta1"
kind: "PodDisruptionBudget"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-telemetry"
  labels:
    app: "telemetry"
    app.kubernetes.io/name: "istio"
    istio-mixer-type: "telemetry"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
    version: "1.5.4"
    istio: "mixer"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "telemetry"
      istio-mixer-type: "telemetry"
      release: "istio"
      istio: "mixer"
    matchExpressions: []

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "prometheus"
  labels:
    app: "prometheus"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "prometheus"
    release: "istio"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-pilot"
  labels:
    app: "pilot"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "pilot"
    istio: "pilot"
    app.kubernetes.io/component: "deployment.istio-pilot"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      istio: "pilot"
      app.kubernetes.io/component: "deployment.istio-pilot"
    matchExpressions: []
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: "pilot"
        release: "istio"
        heritage: "Tiller"
        chart: "pilot"
        istio: "pilot"
        app.kubernetes.io/component: "deployment.istio-pilot"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "istio-pilot-service-account"
      volumes:
      - name: "config-volume"
        configMap:
          name: "istio"
      - name: "istio-certs"
        secret:
          secretName: "istio.istio-pilot-service-account"
          optional: true
      containers:
      - name: "discovery"
        image: "docker.io/istio/pilot:1.5.4"
        command: []
        args:
        - "discovery"
        - "--monitoringAddr=:15014"
        - "--log_output_level=default:info"
        - "--domain"
        - "cluster.local"
        - "--secureGrpcAddr"
        - ""
        - "--keepaliveMaxServerConnectionAge"
        - "30m"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 8080
          protocol: "TCP"
        - containerPort: 15010
          protocol: "TCP"
        env:
        - name: "POD_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "PILOT_PUSH_THROTTLE"
          value: "100"
        - name: "PILOT_TRACE_SAMPLING"
          value: "1"
        - name: "PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND"
          value: "true"
        - name: "PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND"
          value: "false"
        volumeMounts:
        - name: "config-volume"
          mountPath: "/etc/istio/config"
        - name: "istio-certs"
          readOnly: true
          mountPath: "/etc/certs"
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/ready"
            port: 8080
        resources:
          limits: {}
          requests:
            cpu: "500m"
            memory: "2048Mi"
      - name: "istio-proxy"
        image: "docker.io/istio/proxyv2:1.5.4"
        command: []
        args:
        - "proxy"
        - "--domain"
        - "$(POD_NAMESPACE).svc.cluster.local"
        - "--serviceCluster"
        - "istio-pilot"
        - "--templateFile"
        - "/etc/istio/proxy/envoy_pilot.yaml.tmpl"
        - "--controlPlaneAuthPolicy"
        - "NONE"
        - "--log_output_level=default:info"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 15003
          protocol: "TCP"
        - containerPort: 15005
          protocol: "TCP"
        - containerPort: 15007
          protocol: "TCP"
        - containerPort: 15011
          protocol: "TCP"
        env:
        - name: "POD_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "INSTANCE_IP"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "status.podIP"
        - name: "SDS_ENABLED"
          value: "false"
        volumeMounts:
        - name: "istio-certs"
          readOnly: true
          mountPath: "/etc/certs"
        resources:
          limits:
            cpu: "2000m"
            memory: "1024Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"

---
metadata:
  namespace: "istio-system"
  name: "promtcp"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "rule"
spec:
  match: "context.protocol == \"tcp\""
  actions:
  - handler: "prometheus"
    instances:
    - "tcpbytesent"
    - "tcpbytereceived"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations:
    networking.istio.io/exportTo: "*"
  name: "istio-telemetry"
  labels:
    app: "mixer"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
    istio: "mixer"
    app.kubernetes.io/component: "deployment.istio-telemetry"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    istio-mixer-type: "telemetry"
    istio: "mixer"
    app.kubernetes.io/component: "deployment.istio-telemetry"
  ports:
  - name: "grpc-mixer"
    port: 9091
  - name: "grpc-mixer-mtls"
    port: 15004
  - name: "http-monitoring"
    port: 15014
  - name: "prometheus"
    port: 42422

---
apiVersion: "policy/v1beta1"
kind: "PodDisruptionBudget"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-policy"
  labels:
    app: "policy"
    app.kubernetes.io/name: "istio"
    istio-mixer-type: "policy"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
    version: "1.5.4"
    istio: "mixer"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "policy"
      istio-mixer-type: "policy"
      release: "istio"
      istio: "mixer"
    matchExpressions: []

---
metadata:
  namespace: "istio-system"
  name: "promhttp"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "rule"
spec:
  match: "(context.protocol == \"http\" || context.protocol == \"grpc\") && (match((request.useragent\
    \ | \"-\"), \"kube-probe*\") == false) && (match((request.useragent | \"-\"),\
    \ \"Prometheus*\") == false)"
  actions:
  - handler: "prometheus"
    instances:
    - "requestcount"
    - "requestduration"
    - "requestsize"
    - "responsesize"

---
apiVersion: "policy/v1beta1"
kind: "PodDisruptionBudget"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-pilot"
  labels:
    app: "pilot"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "pilot"
    istio: "pilot"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "pilot"
      release: "istio"
      istio: "pilot"
    matchExpressions: []

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-galley-admin-role-binding-istio-system"
  labels:
    app: "galley"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "galley"
    release: "istio"
subjects:
- kind: "ServiceAccount"
  name: "istio-galley-service-account"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "istio-galley-istio-system"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-galley-service-account"
  labels:
    app: "galley"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "galley"
    release: "istio"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-ingressgateway"
  labels:
    app: "istio-ingressgateway"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "gateways"
    istio: "ingressgateway"
    app.kubernetes.io/component: "deployment.istio-ingressgateway"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "istio-ingressgateway"
      istio: "ingressgateway"
      app.kubernetes.io/component: "deployment.istio-ingressgateway"
    matchExpressions: []
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: "istio-ingressgateway"
        release: "istio"
        heritage: "Tiller"
        chart: "gateways"
        istio: "ingressgateway"
        app.kubernetes.io/component: "deployment.istio-ingressgateway"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "istio-ingressgateway-service-account"
      volumes:
      - name: "istio-certs"
        secret:
          secretName: "istio.istio-ingressgateway-service-account"
          optional: true
      - name: "ingressgateway-certs"
        secret:
          secretName: "istio-ingressgateway-certs"
          optional: true
      - name: "ingressgateway-ca-certs"
        secret:
          secretName: "istio-ingressgateway-ca-certs"
          optional: true
      containers:
      - name: "istio-proxy"
        image: "docker.io/istio/proxyv2:1.5.4"
        command: []
        args:
        - "proxy"
        - "router"
        - "--domain"
        - "$(POD_NAMESPACE).svc.cluster.local"
        - "--log_output_level=default:info"
        - "--drainDuration"
        - "45s"
        - "--parentShutdownDuration"
        - "1m0s"
        - "--connectTimeout"
        - "10s"
        - "--serviceCluster"
        - "istio-ingressgateway"
        - "--zipkinAddress"
        - "zipkin:9411"
        - "--proxyAdminPort"
        - "15000"
        - "--statusPort"
        - "15020"
        - "--controlPlaneAuthPolicy"
        - "NONE"
        - "--discoveryAddress"
        - "istio-pilot:15010"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 15020
          protocol: "TCP"
        - containerPort: 80
          protocol: "TCP"
        - containerPort: 443
          protocol: "TCP"
        - containerPort: 31400
          protocol: "TCP"
        - containerPort: 15029
          protocol: "TCP"
        - containerPort: 15030
          protocol: "TCP"
        - containerPort: 15031
          protocol: "TCP"
        - containerPort: 15032
          protocol: "TCP"
        - containerPort: 15443
          protocol: "TCP"
        - name: "http-envoy-prom"
          containerPort: 15090
          protocol: "TCP"
        env:
        - name: "NODE_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "spec.nodeName"
        - name: "POD_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "INSTANCE_IP"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "status.podIP"
        - name: "HOST_IP"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "status.hostIP"
        - name: "SERVICE_ACCOUNT"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "spec.serviceAccountName"
        - name: "ISTIO_AUTO_MTLS_ENABLED"
          value: "true"
        - name: "ISTIO_META_POD_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "ISTIO_META_CONFIG_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "ISTIO_METAJSON_LABELS"
          value: "{\"app\":\"istio-ingressgateway\",\"chart\":\"gateways\",\"heritage\"\
            :\"Tiller\",\"istio\":\"ingressgateway\",\"release\":\"istio\"}\n"
        - name: "ISTIO_META_CLUSTER_ID"
          value: "Kubernetes"
        - name: "SDS_ENABLED"
          value: "false"
        - name: "ISTIO_META_WORKLOAD_NAME"
          value: "istio-ingressgateway"
        - name: "ISTIO_META_OWNER"
          value: "kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-ingressgateway"
        - name: "ISTIO_META_ROUTER_MODE"
          value: "standard"
        volumeMounts:
        - name: "istio-certs"
          readOnly: true
          mountPath: "/etc/certs"
        - name: "ingressgateway-certs"
          readOnly: true
          mountPath: "/etc/istio/ingressgateway-certs"
        - name: "ingressgateway-ca-certs"
          readOnly: true
          mountPath: "/etc/istio/ingressgateway-ca-certs"
        readinessProbe:
          initialDelaySeconds: 1
          timeoutSeconds: 1
          periodSeconds: 2
          successThreshold: 1
          failureThreshold: 30
          httpGet:
            path: "/healthz/ready"
            port: 15020
            scheme: "HTTP"
        resources:
          limits:
            cpu: "2000m"
            memory: "1024Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-kiali-admin-role-binding-istio-system"
  labels:
    app: "kiali"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "kiali"
    release: "istio"
subjects:
- kind: "ServiceAccount"
  name: "kiali-service-account"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "kiali"

---
metadata:
  name: "istio-galley"
  labels:
    app: "galley"
    release: "istio"
    heritage: "Tiller"
    chart: "galley"
    istio: "galley"
apiVersion: "admissionregistration.k8s.io/v1beta1"
webhooks:
- name: "pilot.validation.istio.io"
  rules:
  - operations:
    - "CREATE"
    - "UPDATE"
    apiVersions:
    - "v1alpha2"
    resources:
    - "httpapispecs"
    - "httpapispecbindings"
    - "quotaspecs"
    - "quotaspecbindings"
    apiGroups:
    - "config.istio.io"
  - operations:
    - "CREATE"
    - "UPDATE"
    apiVersions:
    - "*"
    resources:
    - "*"
    apiGroups:
    - "rbac.istio.io"
  - operations:
    - "CREATE"
    - "UPDATE"
    apiVersions:
    - "*"
    resources:
    - "*"
    apiGroups:
    - "security.istio.io"
  - operations:
    - "CREATE"
    - "UPDATE"
    apiVersions:
    - "*"
    resources:
    - "*"
    apiGroups:
    - "authentication.istio.io"
  - operations:
    - "CREATE"
    - "UPDATE"
    apiVersions:
    - "*"
    resources:
    - "destinationrules"
    - "envoyfilters"
    - "gateways"
    - "serviceentries"
    - "sidecars"
    - "virtualservices"
    apiGroups:
    - "networking.istio.io"
  clientConfig:
    caBundle: ""
    service:
      path: "/admitpilot"
      name: "istio-galley"
      namespace: "istio-system"
  failurePolicy: "Ignore"
  sideEffects: "None"
- name: "mixer.validation.istio.io"
  rules:
  - operations:
    - "CREATE"
    - "UPDATE"
    apiVersions:
    - "v1alpha2"
    resources:
    - "rules"
    - "attributemanifests"
    - "adapters"
    - "handlers"
    - "instances"
    - "templates"
    apiGroups:
    - "config.istio.io"
  clientConfig:
    caBundle: ""
    service:
      path: "/admitmixer"
      name: "istio-galley"
      namespace: "istio-system"
  failurePolicy: "Ignore"
  sideEffects: "None"
kind: "ValidatingWebhookConfiguration"

---
kind: "ConfigMap"
apiVersion: "v1"
data:
  custom-resources.yaml: "# Authentication policy to enable permissive mode for all\
    \ services (that have sidecar) in the mesh.\napiVersion: \"authentication.istio.io/v1alpha1\"\
    \nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\n  labels:\n    app: security\n\
    \    chart: security\n    heritage: Tiller\n    release: istio\nspec:\n  peers:\n\
    \  - mtls:\n      mode: PERMISSIVE"
  run.sh: "#!/bin/sh\n\nset -x\n\nif [ \"$#\" -ne \"1\" ]; then\n    echo \"first\
    \ argument should be path to custom resource yaml\"\n    exit 1\nfi\n\npathToResourceYAML=${1}\n\
    \nkubectl get validatingwebhookconfiguration istio-galley 2>/dev/null\nif [ \"\
    $?\" -eq 0 ]; then\n    echo \"istio-galley validatingwebhookconfiguration found\
    \ - waiting for istio-galley deployment to be ready\"\n    while true; do\n  \
    \      kubectl -n istio-system get deployment istio-galley 2>/dev/null\n     \
    \   if [ \"$?\" -eq 0 ]; then\n            break\n        fi\n        sleep 1\n\
    \    done\n    kubectl -n istio-system rollout status deployment istio-galley\n\
    \    if [ \"$?\" -ne 0 ]; then\n        echo \"istio-galley deployment rollout\
    \ status check failed\"\n        exit 1\n    fi\n    echo \"istio-galley deployment\
    \ ready for configuration validation\"\nfi\nsleep 5\nkubectl apply -f ${pathToResourceYAML}"
binaryData: {}
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-security-custom-resources"
  labels:
    app: "security"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "security"
    istio: "citadel"

---
apiVersion: "autoscaling/v2beta1"
kind: "HorizontalPodAutoscaler"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-ingressgateway"
  labels:
    app: "istio-ingressgateway"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "gateways"
    istio: "ingressgateway"
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: "apps/v1"
    kind: "Deployment"
    name: "istio-ingressgateway"
  metrics:
  - type: "Resource"
    resource:
      name: "cpu"
      targetAverageUtilization: 80

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations:
    prometheus.io/scrape: "true"
  name: "prometheus"
  labels:
    app: "prometheus"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "prometheus"
    app.kubernetes.io/component: "deployment.prometheus"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    app: "prometheus"
    app.kubernetes.io/component: "deployment.prometheus"
  ports:
  - name: "http-prometheus"
    port: 9090
    protocol: "TCP"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-policy"
  labels:
    app: "istio-mixer"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
    istio: "mixer"
    app.kubernetes.io/component: "deployment.istio-policy"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      istio-mixer-type: "policy"
      istio: "mixer"
      app.kubernetes.io/component: "deployment.istio-policy"
    matchExpressions: []
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: "policy"
        istio-mixer-type: "policy"
        release: "istio"
        heritage: "Tiller"
        chart: "mixer"
        istio: "mixer"
        app.kubernetes.io/component: "deployment.istio-policy"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "istio-mixer-service-account"
      volumes:
      - name: "istio-certs"
        secret:
          secretName: "istio.istio-mixer-service-account"
          optional: true
      - name: "uds-socket"
        emptyDir: {}
      - name: "policy-adapter-secret"
        secret:
          secretName: "policy-adapter-secret"
          optional: true
      containers:
      - name: "mixer"
        image: "docker.io/istio/mixer:1.5.4"
        command: []
        args:
        - "--monitoringPort=15014"
        - "--address"
        - "unix:///sock/mixer.socket"
        - "--log_output_level=default:info"
        - "--configStoreURL=mcp://istio-galley.istio-system.svc:9901"
        - "--configDefaultNamespace=istio-system"
        - "--useAdapterCRDs=false"
        - "--useTemplateCRDs=false"
        - "--trace_zipkin_url=http://zipkin.istio-system:9411/api/v1/spans"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 15014
          protocol: "TCP"
        - containerPort: 42422
          protocol: "TCP"
        env:
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "GOMAXPROCS"
          value: "6"
        volumeMounts:
        - name: "istio-certs"
          readOnly: true
          mountPath: "/etc/certs"
        - name: "uds-socket"
          mountPath: "/sock"
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/version"
            port: 15014
        resources:
          limits: {}
          requests:
            cpu: "10m"
      - name: "istio-proxy"
        image: "docker.io/istio/proxyv2:1.5.4"
        command: []
        args:
        - "proxy"
        - "--domain"
        - "$(POD_NAMESPACE).svc.cluster.local"
        - "--serviceCluster"
        - "istio-policy"
        - "--templateFile"
        - "/etc/istio/proxy/envoy_policy.yaml.tmpl"
        - "--controlPlaneAuthPolicy"
        - "NONE"
        - "--log_output_level=default:info"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9091
          protocol: "TCP"
        - containerPort: 15004
          protocol: "TCP"
        - name: "http-envoy-prom"
          containerPort: 15090
          protocol: "TCP"
        env:
        - name: "POD_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "INSTANCE_IP"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "status.podIP"
        - name: "SDS_ENABLED"
          value: "false"
        volumeMounts:
        - name: "istio-certs"
          readOnly: true
          mountPath: "/etc/certs"
        - name: "uds-socket"
          mountPath: "/sock"
        - name: "policy-adapter-secret"
          readOnly: true
          mountPath: "/var/run/secrets/istio.io/policy/adapter"
        resources:
          limits:
            cpu: "2000m"
            memory: "1024Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - "authentication.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "networking.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "admissionregistration.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "validatingwebhookconfigurations"
  verbs:
  - "get"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "deployments"
  - "replicasets"
  verbs:
  - "get"
  - "list"
  - "watch"
metadata:
  annotations: {}
  name: "istio-security-post-install-istio-system"
  labels:
    app: "security"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "security"
    release: "istio"

---
apiVersion: "policy/v1beta1"
kind: "PodDisruptionBudget"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-ingressgateway"
  labels:
    app: "istio-ingressgateway"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "gateways"
    istio: "ingressgateway"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "istio-ingressgateway"
      release: "istio"
      istio: "ingressgateway"
    matchExpressions: []

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "kiali"
  labels:
    app: "kiali"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "kiali"
    release: "istio"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    app: "kiali"
  ports:
  - name: "http-kiali"
    port: 20001
    protocol: "TCP"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-citadel"
  labels:
    app: "security"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "security"
    istio: "citadel"
    app.kubernetes.io/component: "deployment.istio-citadel"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      istio: "citadel"
      app.kubernetes.io/component: "deployment.istio-citadel"
    matchExpressions: []
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: "security"
        release: "istio"
        heritage: "Tiller"
        chart: "security"
        istio: "citadel"
        app.kubernetes.io/component: "deployment.istio-citadel"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "istio-citadel-service-account"
      containers:
      - name: "citadel"
        image: "docker.io/istio/citadel:1.5.4"
        command: []
        args:
        - "--append-dns-names=true"
        - "--grpc-port=8060"
        - "--citadel-storage-namespace=istio-system"
        - "--custom-dns-names=istio-pilot-service-account.istio-system:istio-pilot.istio-system"
        - "--monitoring-port=15014"
        - "--self-signed-ca=true"
        - "--workload-cert-ttl=2160h"
        imagePullPolicy: "IfNotPresent"
        env:
        - name: "CITADEL_ENABLE_NAMESPACES_BY_DEFAULT"
          value: "true"
        resources:
          limits: {}
          requests:
            cpu: "10m"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "admissionregistration.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "mutatingwebhookconfigurations"
  verbs:
  - "get"
  - "list"
  - "watch"
  - "patch"
metadata:
  annotations: {}
  name: "istio-sidecar-injector-istio-system"
  labels:
    app: "sidecarInjectorWebhook"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "sidecarInjectorWebhook"
    istio: "sidecar-injector"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "kiali-service-account"
  labels:
    app: "kiali"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "kiali"
    release: "istio"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-multi"
  labels:
    app.kubernetes.io/name: "istio"

---
metadata:
  namespace: "istio-system"
  name: "responsesize"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "metric"
  params:
    monitored_resource_type: "\"UNSPECIFIED\""
    value: "response.size | 0"
    dimensions:
      destination_version: "destination.labels[\"version\"] | \"unknown\""
      response_code: "response.code | 200"
      source_principal: "source.principal | \"unknown\""
      destination_workload: "destination.workload.name | \"unknown\""
      destination_app: "destination.labels[\"app\"] | \"unknown\""
      source_workload_namespace: "source.workload.namespace | \"unknown\""
      reporter: "conditional((context.reporter.kind | \"inbound\") == \"outbound\"\
        , \"source\", \"destination\")"
      destination_service_namespace: "destination.service.namespace | \"unknown\""
      destination_workload_namespace: "destination.workload.namespace | \"unknown\""
      source_version: "source.labels[\"version\"] | \"unknown\""
      response_flags: "context.proxy_error_code | \"-\""
      destination_service: "destination.service.host | conditional((destination.service.name\
        \ | \"unknown\") == \"unknown\", \"unknown\", request.host)"
      source_app: "source.labels[\"app\"] | \"unknown\""
      grpc_response_status: "response.grpc_status | \"\""
      destination_service_name: "destination.service.name | \"unknown\""
      connection_security_policy: "conditional((context.reporter.kind | \"inbound\"\
        ) == \"outbound\", \"unknown\", conditional(connection.mtls | false, \"mutual_tls\"\
        , \"none\"))"
      source_workload: "source.workload.name | \"unknown\""
      destination_principal: "destination.principal | \"unknown\""
      request_protocol: "api.protocol | context.protocol | \"unknown\""

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "prometheus-istio-system"
  labels:
    app: "prometheus"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "prometheus"
    release: "istio"
subjects:
- kind: "ServiceAccount"
  name: "prometheus"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "prometheus-istio-system"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-pilot"
  labels:
    app: "pilot"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "pilot"
    istio: "pilot"
    app.kubernetes.io/component: "deployment.istio-pilot"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    istio: "pilot"
    app.kubernetes.io/component: "deployment.istio-pilot"
  ports:
  - name: "grpc-xds"
    port: 15010
  - name: "https-xds"
    port: 15011
  - name: "http-legacy-discovery"
    port: 8080
  - name: "http-monitoring"
    port: 15014

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-citadel-service-account"
  labels:
    app: "security"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "security"
    release: "istio"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-reader-service-account"
  labels:
    app.kubernetes.io/name: "istio"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "kiali-np"
  labels:
    app: "kiali"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "kiali"
    release: "istio"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "NodePort"
  selector:
    app: "kiali"
  ports:
  - name: "np-kiali"
    port: 20001
    protocol: "TCP"
    targetPort: 20001

---
metadata:
  namespace: "istio-system"
  name: "tcpconnectionsclosed"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "instance"
spec:
  compiledTemplate: "metric"
  params:
    monitored_resource_type: "\"UNSPECIFIED\""
    value: "1"
    dimensions:
      destination_version: "destination.labels[\"version\"] | \"unknown\""
      source_principal: "source.principal | \"unknown\""
      destination_workload: "destination.workload.name | \"unknown\""
      destination_app: "destination.labels[\"app\"] | \"unknown\""
      source_workload_namespace: "source.workload.namespace | \"unknown\""
      reporter: "conditional((context.reporter.kind | \"inbound\") == \"outbound\"\
        , \"source\", \"destination\")"
      destination_service_namespace: "destination.service.namespace | \"unknown\""
      destination_workload_namespace: "destination.workload.namespace | \"unknown\""
      source_version: "source.labels[\"version\"] | \"unknown\""
      response_flags: "context.proxy_error_code | \"-\""
      destination_service: "destination.service.host | \"unknown\""
      source_app: "source.labels[\"app\"] | \"unknown\""
      destination_service_name: "destination.service.name | \"unknown\""
      connection_security_policy: "conditional((context.reporter.kind | \"inbound\"\
        ) == \"outbound\", \"unknown\", conditional(connection.mtls | false, \"mutual_tls\"\
        , \"none\"))"
      source_workload: "source.workload.name | \"unknown\""
      destination_principal: "destination.principal | \"unknown\""

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-sidecar-injector-service-account"
  labels:
    app: "sidecarInjectorWebhook"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "sidecarInjectorWebhook"
    istio: "sidecar-injector"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-galley"
  labels:
    app: "galley"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "galley"
    istio: "galley"
    app.kubernetes.io/component: "deployment.istio-galley"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    istio: "galley"
    app.kubernetes.io/component: "deployment.istio-galley"
  ports:
  - name: "https-validation"
    port: 443
    targetPort: 9443
  - name: "http-monitoring"
    port: 15014
  - name: "grpc-mcp"
    port: 9901

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "istio-pilot-istio-system"
  labels:
    app: "pilot"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "pilot"
    release: "istio"
subjects:
- kind: "ServiceAccount"
  name: "istio-pilot-service-account"
  namespace: "istio-system"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "istio-pilot-istio-system"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - "config.istio.io"
  - "rbac.istio.io"
  - "security.istio.io"
  - "networking.istio.io"
  - "authentication.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "*"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "ingresses"
  - "ingresses/status"
  verbs:
  - "*"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  verbs:
  - "create"
  - "get"
  - "list"
  - "watch"
  - "update"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "endpoints"
  - "pods"
  - "services"
  - "namespaces"
  - "nodes"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "discovery.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "endpointslices"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "secrets"
  verbs:
  - "create"
  - "get"
  - "watch"
  - "list"
  - "update"
  - "delete"
- apiGroups:
  - "certificates.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "certificatesigningrequests"
  - "certificatesigningrequests/approval"
  - "certificatesigningrequests/status"
  verbs:
  - "update"
  - "create"
  - "get"
  - "delete"
metadata:
  annotations: {}
  name: "istio-pilot-istio-system"
  labels:
    app: "pilot"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "pilot"
    release: "istio"

---
metadata:
  name: "istio-sidecar-injector"
  labels:
    app: "sidecarInjectorWebhook"
    release: "istio"
    heritage: "Tiller"
    chart: "sidecarInjectorWebhook"
apiVersion: "admissionregistration.k8s.io/v1beta1"
webhooks:
- name: "sidecar-injector.istio.io"
  namespaceSelector:
    matchLabels:
      istio-injection: "enabled"
  rules:
  - operations:
    - "CREATE"
    apiVersions:
    - "v1"
    resources:
    - "pods"
    apiGroups:
    - ""
  clientConfig:
    caBundle: ""
    service:
      path: "/inject"
      name: "istio-sidecar-injector"
      namespace: "istio-system"
  failurePolicy: "Fail"
kind: "MutatingWebhookConfiguration"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-sidecar-injector"
  labels:
    app: "sidecarInjectorWebhook"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "sidecarInjectorWebhook"
    istio: "sidecar-injector"
    app.kubernetes.io/component: "deployment.istio-sidecar-injector"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      istio: "sidecar-injector"
      app.kubernetes.io/component: "deployment.istio-sidecar-injector"
    matchExpressions: []
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: "sidecarInjectorWebhook"
        release: "istio"
        heritage: "Tiller"
        chart: "sidecarInjectorWebhook"
        istio: "sidecar-injector"
        app.kubernetes.io/component: "deployment.istio-sidecar-injector"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "istio-sidecar-injector-service-account"
      volumes:
      - name: "config-volume"
        configMap:
          name: "istio"
      - name: "certs"
        secret:
          secretName: "istio.istio-sidecar-injector-service-account"
      - name: "inject-config"
        configMap:
          name: "istio-sidecar-injector"
          items:
          - key: "config"
            path: "config"
          - key: "values"
            path: "values"
      containers:
      - name: "sidecar-injector-webhook"
        image: "docker.io/istio/sidecar_injector:1.5.4"
        command: []
        args:
        - "--caCertFile=/etc/istio/certs/root-cert.pem"
        - "--tlsCertFile=/etc/istio/certs/cert-chain.pem"
        - "--tlsKeyFile=/etc/istio/certs/key.pem"
        - "--injectConfig=/etc/istio/inject/config"
        - "--meshConfig=/etc/istio/config/mesh"
        - "--healthCheckInterval=2s"
        - "--healthCheckFile=/tmp/health"
        - "--reconcileWebhookConfig=true"
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
        - name: "config-volume"
          readOnly: true
          mountPath: "/etc/istio/config"
        - name: "certs"
          readOnly: true
          mountPath: "/etc/istio/certs"
        - name: "inject-config"
          readOnly: true
          mountPath: "/etc/istio/inject"
        livenessProbe:
          initialDelaySeconds: 4
          timeoutSeconds: 1
          periodSeconds: 4
          successThreshold: 1
          failureThreshold: 3
          exec:
            command:
            - "/usr/local/bin/sidecar-injector"
            - "probe"
            - "--probe-path=/tmp/health"
            - "--interval=4s"
        readinessProbe:
          initialDelaySeconds: 4
          timeoutSeconds: 1
          periodSeconds: 4
          successThreshold: 1
          failureThreshold: 3
          exec:
            command:
            - "/usr/local/bin/sidecar-injector"
            - "probe"
            - "--probe-path=/tmp/health"
            - "--interval=4s"
        resources:
          limits: {}
          requests:
            cpu: "10m"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-telemetry"
  labels:
    app: "istio-mixer"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
    istio: "mixer"
    app.kubernetes.io/component: "deployment.istio-telemetry"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      istio-mixer-type: "telemetry"
      istio: "mixer"
      app.kubernetes.io/component: "deployment.istio-telemetry"
    matchExpressions: []
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: "telemetry"
        istio-mixer-type: "telemetry"
        release: "istio"
        heritage: "Tiller"
        chart: "mixer"
        istio: "mixer"
        app.kubernetes.io/component: "deployment.istio-telemetry"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "istio-mixer-service-account"
      volumes:
      - name: "istio-certs"
        secret:
          secretName: "istio.istio-mixer-service-account"
          optional: true
      - name: "uds-socket"
        emptyDir: {}
      - name: "telemetry-adapter-secret"
        secret:
          secretName: "telemetry-adapter-secret"
          optional: true
      containers:
      - name: "mixer"
        image: "docker.io/istio/mixer:1.5.4"
        command: []
        args:
        - "--monitoringPort=15014"
        - "--address"
        - "unix:///sock/mixer.socket"
        - "--log_output_level=default:info"
        - "--configStoreURL=mcp://istio-galley.istio-system.svc:9901"
        - "--configDefaultNamespace=istio-system"
        - "--useAdapterCRDs=false"
        - "--useTemplateCRDs=false"
        - "--trace_zipkin_url=http://zipkin.istio-system:9411/api/v1/spans"
        - "--averageLatencyThreshold"
        - "100ms"
        - "--loadsheddingMode"
        - "enforce"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 15014
          protocol: "TCP"
        - containerPort: 42422
          protocol: "TCP"
        env:
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "GOMAXPROCS"
          value: "6"
        volumeMounts:
        - name: "istio-certs"
          readOnly: true
          mountPath: "/etc/certs"
        - name: "telemetry-adapter-secret"
          readOnly: true
          mountPath: "/var/run/secrets/istio.io/telemetry/adapter"
        - name: "uds-socket"
          mountPath: "/sock"
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/version"
            port: 15014
        resources:
          limits:
            cpu: "4800m"
            memory: "4G"
          requests:
            cpu: "1000m"
            memory: "1G"
      - name: "istio-proxy"
        image: "docker.io/istio/proxyv2:1.5.4"
        command: []
        args:
        - "proxy"
        - "--domain"
        - "$(POD_NAMESPACE).svc.cluster.local"
        - "--serviceCluster"
        - "istio-telemetry"
        - "--templateFile"
        - "/etc/istio/proxy/envoy_telemetry.yaml.tmpl"
        - "--controlPlaneAuthPolicy"
        - "NONE"
        - "--log_output_level=default:info"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9091
          protocol: "TCP"
        - containerPort: 15004
          protocol: "TCP"
        - name: "http-envoy-prom"
          containerPort: 15090
          protocol: "TCP"
        env:
        - name: "POD_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "INSTANCE_IP"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "status.podIP"
        - name: "SDS_ENABLED"
          value: "false"
        volumeMounts:
        - name: "istio-certs"
          readOnly: true
          mountPath: "/etc/certs"
        - name: "uds-socket"
          mountPath: "/sock"
        resources:
          limits:
            cpu: "2000m"
            memory: "1024Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"

---
metadata:
  namespace: "istio-system"
  name: "istio-telemetry"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "networking.istio.io/v1alpha3"
kind: "DestinationRule"
spec:
  host: "istio-telemetry.istio-system.svc.cluster.local"
  trafficPolicy:
    portLevelSettings:
    - port:
        number: 15004
      tls:
        mode: "ISTIO_MUTUAL"
    - port:
        number: 9091
      tls:
        mode: "DISABLE"
    connectionPool:
      http:
        http2MaxRequests: 10000
        maxRequestsPerConnection: 10000

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "prometheus"
  labels:
    app: "prometheus"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "prometheus"
    app.kubernetes.io/component: "deployment.prometheus"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "prometheus"
      app.kubernetes.io/component: "deployment.prometheus"
    matchExpressions: []
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: "prometheus"
        heritage: "Tiller"
        chart: "prometheus"
        release: "istio"
        app.kubernetes.io/component: "deployment.prometheus"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "prometheus"
      volumes:
      - name: "config-volume"
        configMap:
          name: "prometheus"
      - name: "istio-certs"
        secret:
          secretName: "istio.default"
          defaultMode: 420
      containers:
      - name: "prometheus"
        image: "docker.io/prom/prometheus:v2.12.0"
        command: []
        args:
        - "--storage.tsdb.retention=6h"
        - "--config.file=/etc/prometheus/prometheus.yml"
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: "http"
          containerPort: 9090
          protocol: "TCP"
        volumeMounts:
        - name: "config-volume"
          mountPath: "/etc/prometheus"
        - name: "istio-certs"
          mountPath: "/etc/istio-certs"
        livenessProbe:
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/-/healthy"
            port: 9090
        readinessProbe:
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/-/ready"
            port: 9090
        resources:
          limits: {}
          requests:
            cpu: "10m"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
                - "ppc64le"
                - "s390x"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "amd64"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "ppc64le"
          - weight: 2
            preference:
              matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: "In"
                values:
                - "s390x"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "nodes"
  - "pods"
  - "services"
  - "endpoints"
  - "replicationcontrollers"
  verbs:
  - "get"
  - "watch"
  - "list"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "replicasets"
  verbs:
  - "get"
  - "list"
  - "watch"
metadata:
  annotations: {}
  name: "istio-reader"
  labels:
    app.kubernetes.io/name: "istio"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - "authentication.istio.io"
  - "config.istio.io"
  - "networking.istio.io"
  - "rbac.istio.io"
  - "security.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "*"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "authentication.istio.io"
  - "config.istio.io"
  - "networking.istio.io"
  - "rbac.istio.io"
  - "security.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "*/status"
  verbs:
  - "update"
- apiGroups:
  - "admissionregistration.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "validatingwebhookconfigurations"
  verbs:
  - "get"
  - "list"
  - "watch"
  - "update"
- apiGroups:
  - "networking.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "gateways"
  verbs:
  - "create"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "deployments"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "pods"
  - "nodes"
  - "services"
  - "endpoints"
  - "namespaces"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "ingresses"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "apiextensions.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "customresourcedefinitions"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "rbac.authorization.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "clusterroles"
  verbs:
  - "get"
  - "list"
  - "watch"
metadata:
  annotations: {}
  name: "istio-galley-istio-system"
  labels:
    app: "galley"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "galley"
    release: "istio"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - "config.istio.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "*"
  verbs:
  - "create"
  - "get"
  - "list"
  - "watch"
  - "patch"
- apiGroups:
  - "apiextensions.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "customresourcedefinitions"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  - "endpoints"
  - "pods"
  - "services"
  - "namespaces"
  - "secrets"
  - "replicationcontrollers"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "replicasets"
  verbs:
  - "get"
  - "list"
  - "watch"
metadata:
  annotations: {}
  name: "istio-mixer-istio-system"
  labels:
    app: "mixer"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "mixer"
    release: "istio"

---
kind: "ConfigMap"
apiVersion: "v1"
data:
  config: "policy: enabled\nalwaysInjectSelector:\n  []\nneverInjectSelector:\n  []\n\
    template: |-\n  rewriteAppHTTPProbe: {{ valueOrDefault .Values.sidecarInjectorWebhook.rewriteAppHTTPProbe\
    \ true }}\n  initContainers:\n  {{ if ne (annotation .ObjectMeta `sidecar.istio.io/interceptionMode`\
    \ .ProxyConfig.InterceptionMode) `NONE` }}\n  {{ if .Values.istio_cni.enabled\
    \ -}}\n  - name: istio-validation\n  {{ else -}}\n  - name: istio-init\n  {{ end\
    \ -}}\n  {{- if contains \"/\" .Values.global.proxy_init.image }}\n    image:\
    \ \"{{ .Values.global.proxy_init.image }}\"\n  {{- else }}\n    image: \"{{ .Values.global.hub\
    \ }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}\"\n  {{- end\
    \ }}\n    command:\n    - istio-iptables\n    - \"-p\"\n    - \"15001\"\n    -\
    \ \"-z\"\n    - \"15006\"\n    - \"-u\"\n    - 1337\n    - \"-m\"\n    - \"{{\
    \ annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode\
    \ }}\"\n    - \"-i\"\n    - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeOutboundIPRanges`\
    \ .Values.global.proxy.includeIPRanges }}\"\n    - \"-x\"\n    - \"{{ annotation\
    \ .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundIPRanges` .Values.global.proxy.excludeIPRanges\
    \ }}\"\n    - \"-b\"\n    - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts`\
    \ `*` }}\"\n    - \"-d\"\n    - \"{{ excludeInboundPort (annotation .ObjectMeta\
    \ `status.sidecar.istio.io/port` .Values.global.proxy.statusPort) (annotation\
    \ .ObjectMeta `traffic.sidecar.istio.io/excludeInboundPorts` .Values.global.proxy.excludeInboundPorts)\
    \ }}\"\n    {{ if or (isset .ObjectMeta.Annotations `traffic.sidecar.istio.io/excludeOutboundPorts`)\
    \ (ne (valueOrDefault .Values.global.proxy.excludeOutboundPorts \"\") \"\") -}}\n\
    \    - \"-o\"\n    - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundPorts`\
    \ .Values.global.proxy.excludeOutboundPorts }}\"\n    {{ end -}}\n    {{ if (isset\
    \ .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces`) -}}\n\
    \    - \"-k\"\n    - \"{{ index .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces`\
    \ }}\"\n    {{ end -}}\n    {{ if .Values.istio_cni.enabled -}}\n    - \"--run-validation\"\
    \n    - \"--skip-rule-apply\"\n    {{ end -}}\n    imagePullPolicy: \"{{ valueOrDefault\
    \ .Values.global.imagePullPolicy `Always` }}\"\n  {{- if .Values.global.proxy_init.resources\
    \ }}\n    resources:\n      {{ toYaml .Values.global.proxy_init.resources | indent\
    \ 4 }}\n  {{- else }}\n    resources: {}\n  {{- end }}\n    securityContext:\n\
    \      allowPrivilegeEscalation: {{ .Values.global.proxy.privileged }}\n     \
    \ privileged: {{ .Values.global.proxy.privileged }}\n      capabilities:\n   \
    \ {{- if not .Values.istio_cni.enabled }}\n        add:\n        - NET_ADMIN\n\
    \        - NET_RAW\n    {{- end }}\n        drop:\n        - ALL\n    {{- if not\
    \ .Values.istio_cni.enabled }}\n      readOnlyRootFilesystem: false\n      runAsGroup:\
    \ 0\n      runAsNonRoot: false\n      runAsUser: 0\n    {{- else }}\n      readOnlyRootFilesystem:\
    \ true\n      runAsGroup: 1337\n      runAsUser: 1337\n      runAsNonRoot: true\n\
    \    {{- end }}\n    restartPolicy: Always\n  {{  end -}}\n  {{- if eq (annotation\
    \ .ObjectMeta `sidecar.istio.io/enableCoreDump` .Values.global.proxy.enableCoreDump)\
    \ \"true\" }}\n  - name: enable-core-dump\n    args:\n    - -c\n    - sysctl -w\
    \ kernel.core_pattern=/var/lib/istio/core.proxy && ulimit -c unlimited\n    command:\n\
    \      - /bin/sh\n    image: {{ $.Values.global.proxy.enableCoreDumpImage }}\n\
    \    imagePullPolicy: IfNotPresent\n    resources: {}\n    securityContext:\n\
    \      allowPrivilegeEscalation: true\n      capabilities:\n        add:\n   \
    \     - SYS_ADMIN\n        drop:\n        - ALL\n      privileged: true\n    \
    \  readOnlyRootFilesystem: false\n      runAsGroup: 0\n      runAsNonRoot: false\n\
    \      runAsUser: 0\n  {{ end }}\n  containers:\n  - name: istio-proxy\n  {{-\
    \ if contains \"/\" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image)\
    \ }}\n    image: \"{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image\
    \ }}\"\n  {{- else }}\n    image: \"{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage`\
    \ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag\
    \ }}\"\n  {{- end }}\n    ports:\n    - containerPort: 15090\n      protocol:\
    \ TCP\n      name: http-envoy-prom\n    args:\n    - proxy\n    - sidecar\n  \
    \  - --domain\n    - $(POD_NAMESPACE).svc.{{ .Values.global.proxy.clusterDomain\
    \ }}\n    - --configPath\n    - \"{{ .ProxyConfig.ConfigPath }}\"\n    - --binaryPath\n\
    \    - \"{{ .ProxyConfig.BinaryPath }}\"\n    - --serviceCluster\n    {{ if ne\
    \ \"\" (index .ObjectMeta.Labels \"app\") -}}\n    - \"{{ index .ObjectMeta.Labels\
    \ `app` }}.$(POD_NAMESPACE)\"\n    {{ else -}}\n    - \"{{ valueOrDefault .DeploymentMeta.Name\
    \ `istio-proxy` }}.{{ valueOrDefault .DeploymentMeta.Namespace `default` }}\"\n\
    \    {{ end -}}\n    - --drainDuration\n    - \"{{ formatDuration .ProxyConfig.DrainDuration\
    \ }}\"\n    - --parentShutdownDuration\n    - \"{{ formatDuration .ProxyConfig.ParentShutdownDuration\
    \ }}\"\n    - --discoveryAddress\n    - \"{{ annotation .ObjectMeta `sidecar.istio.io/discoveryAddress`\
    \ .ProxyConfig.DiscoveryAddress }}\"\n  {{- if eq .Values.global.proxy.tracer\
    \ \"lightstep\" }}\n    - --lightstepAddress\n    - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetAddress\
    \ }}\"\n    - --lightstepAccessToken\n    - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetAccessToken\
    \ }}\"\n    - --lightstepSecure={{ .ProxyConfig.GetTracing.GetLightstep.GetSecure\
    \ }}\n  {{- if .ProxyConfig.GetTracing.GetLightstep.GetSecure }}\n    - --lightstepCacertPath\n\
    \    - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetCacertPath }}\"\n  {{- end\
    \ }}\n  {{- else if eq .Values.global.proxy.tracer \"zipkin\" }}\n    - --zipkinAddress\n\
    \    - \"{{ .ProxyConfig.GetTracing.GetZipkin.GetAddress }}\"\n  {{- else if eq\
    \ .Values.global.proxy.tracer \"datadog\" }}\n    - --datadogAgentAddress\n  \
    \  - \"{{ .ProxyConfig.GetTracing.GetDatadog.GetAddress }}\"\n  {{- end }}\n \
    \ {{- if .Values.global.proxy.logLevel }}\n    - --proxyLogLevel={{ .Values.global.proxy.logLevel\
    \ }}\n  {{- end}}\n  {{- if .Values.global.proxy.componentLogLevel }}\n    - --proxyComponentLogLevel={{\
    \ .Values.global.proxy.componentLogLevel }}\n  {{- end}}\n  {{- if .Values.global.proxy.outlierLogPath\
    \ }}\n    - --outlierLogPath={{ .Values.global.proxy.outlierLogPath }}\n  {{-\
    \ end}}\n    - --dnsRefreshRate\n    - {{ .Values.global.proxy.dnsRefreshRate\
    \ }}\n    - --connectTimeout\n    - \"{{ formatDuration .ProxyConfig.ConnectTimeout\
    \ }}\"\n  {{- if .Values.global.proxy.envoyStatsd.enabled }}\n    - --statsdUdpAddress\n\
    \    - \"{{ .ProxyConfig.StatsdUdpAddress }}\"\n  {{- end }}\n  {{- if .Values.global.proxy.envoyMetricsService.enabled\
    \ }}\n    - --envoyMetricsService\n    - '{{ protoToJSON .ProxyConfig.EnvoyMetricsService\
    \ }}'\n  {{- end }}\n  {{- if .Values.global.proxy.envoyAccessLogService.enabled\
    \ }}\n    - --envoyAccessLogService\n    - '{{ protoToJSON .ProxyConfig.EnvoyAccessLogService\
    \ }}'\n  {{- end }}\n    - --proxyAdminPort\n    - \"{{ .ProxyConfig.ProxyAdminPort\
    \ }}\"\n    {{ if gt .ProxyConfig.Concurrency 0 -}}\n    - --concurrency\n   \
    \ - \"{{ .ProxyConfig.Concurrency }}\"\n    {{ end -}}\n    - --controlPlaneAuthPolicy\n\
    \    - \"{{ annotation .ObjectMeta `sidecar.istio.io/controlPlaneAuthPolicy` .ProxyConfig.ControlPlaneAuthPolicy\
    \ }}\"\n  {{- if (ne (annotation .ObjectMeta \"status.sidecar.istio.io/port\"\
    \ (valueOrDefault .Values.global.proxy.statusPort 0 )) `0`) }}\n    - --statusPort\n\
    \    - \"{{ annotation .ObjectMeta `status.sidecar.istio.io/port` .Values.global.proxy.statusPort\
    \ }}\"\n  {{- end }}\n  {{- if .Values.global.trustDomain }}\n    - --trust-domain={{\
    \ .Values.global.trustDomain }}\n  {{- end }}\n  {{- if .Values.global.proxy.lifecycle\
    \ }}\n    lifecycle:\n      {{ toYaml .Values.global.proxy.lifecycle | indent\
    \ 4 }}\n  {{- end }}\n    env:\n    - name: POD_NAME\n      valueFrom:\n     \
    \   fieldRef:\n          fieldPath: metadata.name\n    - name: ISTIO_META_POD_PORTS\n\
    \      value: |-\n        [\n        {{- $first := true }}\n        {{- range\
    \ $index1, $c := .Spec.Containers }}\n          {{- range $index2, $p := $c.Ports\
    \ }}\n            {{- if (structToJSON $p) }}\n            {{if not $first}},{{end}}{{\
    \ structToJSON $p }}\n            {{- $first = false }}\n            {{- end }}\n\
    \          {{- end}}\n        {{- end}}\n        ]\n    - name: ISTIO_META_APP_CONTAINERS\n\
    \      value: |-\n        [\n          {{- range $index, $container := .Spec.Containers\
    \ }}\n            {{- if ne $index 0}},{{- end}}\n            {{ $container.Name\
    \ }}\n          {{- end}}\n        ]\n    - name: ISTIO_META_CLUSTER_ID\n    \
    \  value: \"{{ valueOrDefault .Values.global.multiCluster.clusterName `Kubernetes`\
    \ }}\"\n    - name: POD_NAMESPACE\n      valueFrom:\n        fieldRef:\n     \
    \     fieldPath: metadata.namespace\n    - name: INSTANCE_IP\n      valueFrom:\n\
    \        fieldRef:\n          fieldPath: status.podIP\n    - name: SERVICE_ACCOUNT\n\
    \      valueFrom:\n        fieldRef:\n          fieldPath: spec.serviceAccountName\n\
    \    {{- if .Values.global.mtls.auto }}\n    - name: ISTIO_AUTO_MTLS_ENABLED\n\
    \      value: \"true\"\n    {{- end }}\n  {{- if eq .Values.global.proxy.tracer\
    \ \"datadog\" }}\n    - name: HOST_IP\n      valueFrom:\n        fieldRef:\n \
    \         fieldPath: status.hostIP\n  {{- if isset .ObjectMeta.Annotations `apm.datadoghq.com/env`\
    \ }}\n  {{- range $key, $value := fromJSON (index .ObjectMeta.Annotations `apm.datadoghq.com/env`)\
    \ }}\n    - name: {{ $key }}\n      value: \"{{ $value }}\"\n  {{- end }}\n  {{-\
    \ end }}\n  {{- end }}\n    - name: ISTIO_META_POD_NAME\n      valueFrom:\n  \
    \      fieldRef:\n          fieldPath: metadata.name\n    - name: ISTIO_META_CONFIG_NAMESPACE\n\
    \      valueFrom:\n        fieldRef:\n          fieldPath: metadata.namespace\n\
    \    - name: SDS_ENABLED\n      value: {{ $.Values.global.sds.enabled }}\n   \
    \ - name: ISTIO_META_INTERCEPTION_MODE\n      value: \"{{ or (index .ObjectMeta.Annotations\
    \ `sidecar.istio.io/interceptionMode`) .ProxyConfig.InterceptionMode.String }}\"\
    \n    {{- if .Values.global.network }}\n    - name: ISTIO_META_NETWORK\n     \
    \ value: \"{{ .Values.global.network }}\"\n    {{- end }}\n    {{ if .ObjectMeta.Annotations\
    \ }}\n    - name: ISTIO_METAJSON_ANNOTATIONS\n      value: |\n             {{\
    \ toJSON .ObjectMeta.Annotations }}\n    {{ end }}\n    {{ if .ObjectMeta.Labels\
    \ }}\n    - name: ISTIO_METAJSON_LABELS\n      value: |\n             {{ toJSON\
    \ .ObjectMeta.Labels }}\n    {{ end }}\n    {{- if .DeploymentMeta.Name }}\n \
    \   - name: ISTIO_META_WORKLOAD_NAME\n      value: {{ .DeploymentMeta.Name }}\n\
    \    {{ end }}\n    {{- if and .TypeMeta.APIVersion .DeploymentMeta.Name }}\n\
    \    - name: ISTIO_META_OWNER\n      value: kubernetes://apis/{{ .TypeMeta.APIVersion\
    \ }}/namespaces/{{ valueOrDefault .DeploymentMeta.Namespace `default` }}/{{ toLower\
    \ .TypeMeta.Kind}}s/{{ .DeploymentMeta.Name }}\n     {{- end}}\n    {{- if (isset\
    \ .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`) }}\n    - name:\
    \ ISTIO_BOOTSTRAP_OVERRIDE\n      value: \"/etc/istio/custom-bootstrap/custom_bootstrap.json\"\
    \n    {{- end }}\n    {{- if .Values.global.sds.customTokenDirectory }}\n    -\
    \ name: ISTIO_META_SDS_TOKEN_PATH\n      value: \"{{ .Values.global.sds.customTokenDirectory\
    \ -}}/sdstoken\"\n    {{- end }}\n    {{- if .Values.global.meshID }}\n    - name:\
    \ ISTIO_META_MESH_ID\n      value: \"{{ .Values.global.meshID }}\"\n    {{- else\
    \ if .Values.global.trustDomain }}\n    - name: ISTIO_META_MESH_ID\n      value:\
    \ \"{{ .Values.global.trustDomain }}\"\n    {{- end }}\n    {{- if eq .Values.global.proxy.tracer\
    \ \"stackdriver\" }}\n    - name: STACKDRIVER_TRACING_ENABLED\n      value: \"\
    true\"\n    - name: STACKDRIVER_TRACING_DEBUG\n      value: \"{{ .ProxyConfig.GetTracing.GetStackdriver.GetDebug\
    \ }}\"\n    {{- if .ProxyConfig.GetTracing.GetStackdriver.GetMaxNumberOfAnnotations\
    \ }}\n    - name: STACKDRIVER_TRACING_MAX_NUMBER_OF_ANNOTATIONS\n      value:\
    \ \"{{ .ProxyConfig.GetTracing.GetStackdriver.GetMaxNumberOfAnnotations.Value\
    \ }}\"\n    {{- end }}\n    {{- if .ProxyConfig.GetTracing.GetStackdriver.GetMaxNumberOfAttributes\
    \ }}\n    - name: STACKDRIVER_TRACING_MAX_NUMBER_OF_ATTRIBUTES\n      value: \"\
    {{ .ProxyConfig.GetTracing.GetStackdriver.GetMaxNumberOfAttributes.Value }}\"\n\
    \    {{- end }}\n    {{- if .ProxyConfig.GetTracing.GetStackdriver.GetMaxNumberOfMessageEvents\
    \ }}\n    - name: STACKDRIVER_TRACING_MAX_NUMBER_OF_MESSAGE_EVENTS\n      value:\
    \ \"{{ .ProxyConfig.GetTracing.GetStackdriver.GetMaxNumberOfMessageEvents.Value\
    \ }}\"\n    {{- end }}\n    {{- end }}\n    imagePullPolicy: {{ .Values.global.imagePullPolicy\
    \ }}\n    {{ if ne (annotation .ObjectMeta `status.sidecar.istio.io/port` (valueOrDefault\
    \ .Values.global.proxy.statusPort 0 )) `0` }}\n    readinessProbe:\n      httpGet:\n\
    \        path: /healthz/ready\n        port: {{ annotation .ObjectMeta `status.sidecar.istio.io/port`\
    \ .Values.global.proxy.statusPort }}\n      initialDelaySeconds: {{ annotation\
    \ .ObjectMeta `readiness.status.sidecar.istio.io/initialDelaySeconds` .Values.global.proxy.readinessInitialDelaySeconds\
    \ }}\n      periodSeconds: {{ annotation .ObjectMeta `readiness.status.sidecar.istio.io/periodSeconds`\
    \ .Values.global.proxy.readinessPeriodSeconds }}\n      failureThreshold: {{ annotation\
    \ .ObjectMeta `readiness.status.sidecar.istio.io/failureThreshold` .Values.global.proxy.readinessFailureThreshold\
    \ }}\n    {{ end -}}\n    securityContext:\n      allowPrivilegeEscalation: {{\
    \ .Values.global.proxy.privileged }}\n      capabilities:\n        {{ if eq (annotation\
    \ .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode)\
    \ `TPROXY` -}}\n        add:\n        - NET_ADMIN\n        {{- end }}\n      \
    \  drop:\n        - ALL\n      privileged: {{ .Values.global.proxy.privileged\
    \ }}\n      readOnlyRootFilesystem: {{ ne (annotation .ObjectMeta `sidecar.istio.io/enableCoreDump`\
    \ .Values.global.proxy.enableCoreDump) \"true\" }}\n      runAsGroup: 1337\n \
    \     {{ if eq (annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode)\
    \ `TPROXY` -}}\n      runAsNonRoot: false\n      runAsUser: 0\n      {{- else\
    \ -}}\n      runAsNonRoot: true\n      runAsUser: 1337\n      {{- end }}\n   \
    \ resources:\n      {{ if or (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`)\
    \ (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`) -}}\n      requests:\n\
    \        {{ if (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`) -}}\n\
    \        cpu: \"{{ index .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU` }}\"\
    \n        {{ end}}\n        {{ if (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`)\
    \ -}}\n        memory: \"{{ index .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`\
    \ }}\"\n        {{ end }}\n    {{ else -}}\n  {{- if .Values.global.proxy.resources\
    \ }}\n      {{ toYaml .Values.global.proxy.resources | indent 4 }}\n  {{- end\
    \ }}\n    {{  end -}}\n    volumeMounts:\n    {{ if (isset .ObjectMeta.Annotations\
    \ `sidecar.istio.io/bootstrapOverride`) }}\n    - mountPath: /etc/istio/custom-bootstrap\n\
    \      name: custom-bootstrap-volume\n    {{- end }}\n    - mountPath: /etc/istio/proxy\n\
    \      name: istio-envoy\n    {{- if .Values.global.sds.enabled }}\n    - mountPath:\
    \ /var/run/sds\n      name: sds-uds-path\n      readOnly: true\n    - mountPath:\
    \ /var/run/secrets/tokens\n      name: istio-token\n    {{- if .Values.global.sds.customTokenDirectory\
    \ }}\n    - mountPath: \"{{ .Values.global.sds.customTokenDirectory -}}\"\n  \
    \    name: custom-sds-token\n      readOnly: true\n    {{- end }}\n    {{- else\
    \ }}\n    - mountPath: /etc/certs/\n      name: istio-certs\n      readOnly: true\n\
    \    {{- end }}\n    {{- if and (eq .Values.global.proxy.tracer \"lightstep\"\
    ) .Values.global.tracer.lightstep.cacertPath }}\n    - mountPath: {{ directory\
    \ .ProxyConfig.GetTracing.GetLightstep.GetCacertPath }}\n      name: lightstep-certs\n\
    \      readOnly: true\n    {{- end }}\n      {{- if isset .ObjectMeta.Annotations\
    \ `sidecar.istio.io/userVolumeMount` }}\n      {{ range $index, $value := fromJSON\
    \ (index .ObjectMeta.Annotations `sidecar.istio.io/userVolumeMount`) }}\n    -\
    \ name: \"{{  $index }}\"\n      {{ toYaml $value | indent 4 }}\n      {{ end\
    \ }}\n      {{- end }}\n  volumes:\n  {{- if (isset .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`)\
    \ }}\n  - name: custom-bootstrap-volume\n    configMap:\n      name: {{ annotation\
    \ .ObjectMeta `sidecar.istio.io/bootstrapOverride` \"\" }}\n  {{- end }}\n  -\
    \ emptyDir:\n      medium: Memory\n    name: istio-envoy\n  {{- if .Values.global.sds.enabled\
    \ }}\n  - name: sds-uds-path\n    hostPath:\n      path: /var/run/sds\n  - name:\
    \ istio-token\n    projected:\n      sources:\n        - serviceAccountToken:\n\
    \            path: istio-token\n            expirationSeconds: 43200\n       \
    \     audience: {{ .Values.global.sds.token.aud }}\n  {{- if .Values.global.sds.customTokenDirectory\
    \ }}\n  - name: custom-sds-token\n    secret:\n      secretName: sdstokensecret\n\
    \  {{- end }}\n  {{- else }}\n  - name: istio-certs\n    secret:\n      optional:\
    \ true\n      {{ if eq .Spec.ServiceAccountName \"\" }}\n      secretName: istio.default\n\
    \      {{ else -}}\n      secretName: {{  printf \"istio.%s\" .Spec.ServiceAccountName\
    \ }}\n      {{  end -}}\n    {{- if isset .ObjectMeta.Annotations `sidecar.istio.io/userVolume`\
    \ }}\n    {{range $index, $value := fromJSON (index .ObjectMeta.Annotations `sidecar.istio.io/userVolume`)\
    \ }}\n  - name: \"{{ $index }}\"\n    {{ toYaml $value | indent 2 }}\n    {{ end\
    \ }}\n    {{ end }}\n  {{- end }}\n  {{- if and (eq .Values.global.proxy.tracer\
    \ \"lightstep\") .Values.global.tracer.lightstep.cacertPath }}\n  - name: lightstep-certs\n\
    \    secret:\n      optional: true\n      secretName: lightstep.cacert\n  {{-\
    \ end }}\n  {{- if .Values.global.podDNSSearchNamespaces }}\n  dnsConfig:\n  \
    \  searches:\n      {{- range .Values.global.podDNSSearchNamespaces }}\n     \
    \ - {{ render . }}\n      {{- end }}\n  {{- end }}\n  podRedirectAnnot:\n    \
    \ sidecar.istio.io/interceptionMode: \"{{ annotation .ObjectMeta `sidecar.istio.io/interceptionMode`\
    \ .ProxyConfig.InterceptionMode }}\"\n     traffic.sidecar.istio.io/includeOutboundIPRanges:\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeOutboundIPRanges`\
    \ .Values.global.proxy.includeIPRanges }}\"\n     traffic.sidecar.istio.io/excludeOutboundIPRanges:\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundIPRanges`\
    \ .Values.global.proxy.excludeIPRanges }}\"\n     traffic.sidecar.istio.io/includeInboundPorts:\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts` (includeInboundPorts\
    \ .Spec.Containers) }}\"\n     traffic.sidecar.istio.io/excludeInboundPorts: \"\
    {{ excludeInboundPort (annotation .ObjectMeta `status.sidecar.istio.io/port` .Values.global.proxy.statusPort)\
    \ (annotation .ObjectMeta `traffic.sidecar.istio.io/excludeInboundPorts` .Values.global.proxy.excludeInboundPorts)\
    \ }}\"\n  {{ if or (isset .ObjectMeta.Annotations `traffic.sidecar.istio.io/excludeOutboundPorts`)\
    \ (ne .Values.global.proxy.excludeOutboundPorts \"\") }}\n     traffic.sidecar.istio.io/excludeOutboundPorts:\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundPorts`\
    \ .Values.global.proxy.excludeOutboundPorts }}\"\n  {{- end }}\n     traffic.sidecar.istio.io/kubevirtInterfaces:\
    \ \"{{ index .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces`\
    \ }}\"\ninjectedAnnotations:"
  values: "{\"certmanager\":{\"enabled\":false},\"galley\":{\"enableAnalysis\":false,\"\
    enableServiceDiscovery\":false,\"enabled\":true,\"global\":{\"arch\":{\"amd64\"\
    :2,\"ppc64le\":2,\"s390x\":2},\"certificates\":[],\"configValidation\":true,\"\
    controlPlaneSecurityEnabled\":false,\"defaultNodeSelector\":{},\"defaultPodDisruptionBudget\"\
    :{\"enabled\":true},\"defaultResources\":{\"requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\"\
    :[],\"disablePolicyChecks\":true,\"enableHelmTest\":false,\"enableTracing\":true,\"\
    hub\":\"docker.io/istio\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\"\
    :[],\"k8sIngress\":{\"enableHttps\":false,\"enabled\":false,\"gatewayName\":\"\
    ingressgateway\"},\"localityLbSetting\":{\"enabled\":true},\"logging\":{\"level\"\
    :\"default:info\"},\"meshExpansion\":{\"enabled\":false,\"useILB\":false},\"meshID\"\
    :\"\",\"meshNetworks\":{},\"monitoringPort\":15014,\"mtls\":{\"auto\":true,\"\
    enabled\":false},\"multiCluster\":{\"clusterName\":\"\",\"enabled\":false},\"\
    network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\":false,\"outboundTrafficPolicy\"\
    :{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\":false,\"priorityClassName\"\
    :\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"accessLogFile\":\"\",\"accessLogFormat\"\
    :\"\",\"autoInject\":\"enabled\",\"clusterDomain\":\"cluster.local\",\"componentLogLevel\"\
    :\"\",\"concurrency\":2,\"dnsRefreshRate\":\"300s\",\"enableCoreDump\":false,\"\
    enableCoreDumpImage\":\"ubuntu:xenial\",\"envoyAccessLogService\":{\"enabled\"\
    :false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\":\"10s\"},\"\
    tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyMetricsService\"\
    :{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\"\
    :\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyStatsd\"\
    :{\"enabled\":false},\"excludeIPRanges\":\"\",\"excludeInboundPorts\":\"\",\"\
    excludeOutboundPorts\":\"\",\"image\":\"proxyv2\",\"includeIPRanges\":\"*\",\"\
    includeInboundPorts\":\"*\",\"kubevirtInterfaces\":\"\",\"logLevel\":\"\",\"privileged\"\
    :false,\"protocolDetectionTimeout\":\"100ms\",\"readinessFailureThreshold\":30,\"\
    readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\":2,\"resources\":{\"\
    limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"100m\"\
    ,\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"},\"proxy_init\"\
    :{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\"\
    :\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"}}},\"sds\":{\"enabled\"\
    :false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\"},\"tag\":\"1.5.4\",\"\
    tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"},\"lightstep\":{\"accessToken\"\
    :\"\",\"address\":\"\",\"cacertPath\":\"\",\"secure\":true},\"stackdriver\":{\"\
    debug\":false,\"maxNumberOfAnnotations\":200,\"maxNumberOfAttributes\":200,\"\
    maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\":\"\"}},\"trustDomain\"\
    :\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"image\":\"galley\",\"nodeSelector\"\
    :{},\"podAnnotations\":{},\"podAntiAffinityLabelSelector\":[],\"podAntiAffinityTermLabelSelector\"\
    :[],\"replicaCount\":1,\"rollingMaxSurge\":\"100%\",\"rollingMaxUnavailable\"\
    :\"25%\",\"tolerations\":[]},\"gateways\":{\"enabled\":true,\"global\":{\"arch\"\
    :{\"amd64\":2,\"ppc64le\":2,\"s390x\":2},\"certificates\":[],\"configValidation\"\
    :true,\"controlPlaneSecurityEnabled\":false,\"defaultNodeSelector\":{},\"defaultPodDisruptionBudget\"\
    :{\"enabled\":true},\"defaultResources\":{\"requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\"\
    :[],\"disablePolicyChecks\":true,\"enableHelmTest\":false,\"enableTracing\":true,\"\
    hub\":\"docker.io/istio\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\"\
    :[],\"k8sIngress\":{\"enableHttps\":false,\"enabled\":false,\"gatewayName\":\"\
    ingressgateway\"},\"localityLbSetting\":{\"enabled\":true},\"logging\":{\"level\"\
    :\"default:info\"},\"meshExpansion\":{\"enabled\":false,\"useILB\":false},\"meshID\"\
    :\"\",\"meshNetworks\":{},\"monitoringPort\":15014,\"mtls\":{\"auto\":true,\"\
    enabled\":false},\"multiCluster\":{\"clusterName\":\"\",\"enabled\":false},\"\
    network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\":false,\"outboundTrafficPolicy\"\
    :{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\":false,\"priorityClassName\"\
    :\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"accessLogFile\":\"\",\"accessLogFormat\"\
    :\"\",\"autoInject\":\"enabled\",\"clusterDomain\":\"cluster.local\",\"componentLogLevel\"\
    :\"\",\"concurrency\":2,\"dnsRefreshRate\":\"300s\",\"enableCoreDump\":false,\"\
    enableCoreDumpImage\":\"ubuntu:xenial\",\"envoyAccessLogService\":{\"enabled\"\
    :false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\":\"10s\"},\"\
    tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyMetricsService\"\
    :{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\"\
    :\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyStatsd\"\
    :{\"enabled\":false},\"excludeIPRanges\":\"\",\"excludeInboundPorts\":\"\",\"\
    excludeOutboundPorts\":\"\",\"image\":\"proxyv2\",\"includeIPRanges\":\"*\",\"\
    includeInboundPorts\":\"*\",\"kubevirtInterfaces\":\"\",\"logLevel\":\"\",\"privileged\"\
    :false,\"protocolDetectionTimeout\":\"100ms\",\"readinessFailureThreshold\":30,\"\
    readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\":2,\"resources\":{\"\
    limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"100m\"\
    ,\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"},\"proxy_init\"\
    :{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\"\
    :\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"}}},\"sds\":{\"enabled\"\
    :false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\"},\"tag\":\"1.5.4\",\"\
    tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"},\"lightstep\":{\"accessToken\"\
    :\"\",\"address\":\"\",\"cacertPath\":\"\",\"secure\":true},\"stackdriver\":{\"\
    debug\":false,\"maxNumberOfAnnotations\":200,\"maxNumberOfAttributes\":200,\"\
    maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\":\"\"}},\"trustDomain\"\
    :\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"istio-egressgateway\":{\"autoscaleEnabled\"\
    :true,\"autoscaleMax\":5,\"autoscaleMin\":1,\"cpu\":{\"targetAverageUtilization\"\
    :80},\"enabled\":false,\"env\":{\"ISTIO_META_ROUTER_MODE\":\"standard\"},\"labels\"\
    :{\"app\":\"istio-egressgateway\",\"istio\":\"egressgateway\"},\"nodeSelector\"\
    :{},\"podAnnotations\":{},\"podAntiAffinityLabelSelector\":[],\"podAntiAffinityTermLabelSelector\"\
    :[],\"ports\":[{\"name\":\"http2\",\"port\":80},{\"name\":\"https\",\"port\":443},{\"\
    name\":\"tls\",\"port\":15443,\"targetPort\":15443}],\"resources\":{\"limits\"\
    :{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\"\
    :\"128Mi\"}},\"rollingMaxSurge\":\"100%\",\"rollingMaxUnavailable\":\"25%\",\"\
    secretVolumes\":[{\"mountPath\":\"/etc/istio/egressgateway-certs\",\"name\":\"\
    egressgateway-certs\",\"secretName\":\"istio-egressgateway-certs\"},{\"mountPath\"\
    :\"/etc/istio/egressgateway-ca-certs\",\"name\":\"egressgateway-ca-certs\",\"\
    secretName\":\"istio-egressgateway-ca-certs\"}],\"serviceAnnotations\":{},\"tolerations\"\
    :[],\"type\":\"ClusterIP\"},\"istio-ilbgateway\":{\"autoscaleEnabled\":true,\"\
    autoscaleMax\":5,\"autoscaleMin\":1,\"cpu\":{\"targetAverageUtilization\":80},\"\
    enabled\":false,\"labels\":{\"app\":\"istio-ilbgateway\",\"istio\":\"ilbgateway\"\
    },\"loadBalancerIP\":\"\",\"nodeSelector\":{},\"podAnnotations\":{},\"ports\"\
    :[{\"name\":\"grpc-pilot-mtls\",\"port\":15011},{\"name\":\"grpc-pilot\",\"port\"\
    :15010},{\"name\":\"tcp-citadel-grpc-tls\",\"port\":8060,\"targetPort\":8060},{\"\
    name\":\"tcp-dns\",\"port\":5353}],\"resources\":{\"requests\":{\"cpu\":\"800m\"\
    ,\"memory\":\"512Mi\"}},\"rollingMaxSurge\":\"100%\",\"rollingMaxUnavailable\"\
    :\"25%\",\"secretVolumes\":[{\"mountPath\":\"/etc/istio/ilbgateway-certs\",\"\
    name\":\"ilbgateway-certs\",\"secretName\":\"istio-ilbgateway-certs\"},{\"mountPath\"\
    :\"/etc/istio/ilbgateway-ca-certs\",\"name\":\"ilbgateway-ca-certs\",\"secretName\"\
    :\"istio-ilbgateway-ca-certs\"}],\"serviceAnnotations\":{\"cloud.google.com/load-balancer-type\"\
    :\"internal\"},\"tolerations\":[],\"type\":\"LoadBalancer\"},\"istio-ingressgateway\"\
    :{\"autoscaleEnabled\":true,\"autoscaleMax\":5,\"autoscaleMin\":1,\"cpu\":{\"\
    targetAverageUtilization\":80},\"enabled\":true,\"env\":{\"ISTIO_META_ROUTER_MODE\"\
    :\"standard\"},\"externalIPs\":[],\"labels\":{\"app\":\"istio-ingressgateway\"\
    ,\"istio\":\"ingressgateway\"},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\"\
    :[],\"meshExpansionPorts\":[{\"name\":\"tcp-pilot-grpc-tls\",\"port\":15011,\"\
    targetPort\":15011},{\"name\":\"tcp-mixer-grpc-tls\",\"port\":15004,\"targetPort\"\
    :15004},{\"name\":\"tcp-citadel-grpc-tls\",\"port\":8060,\"targetPort\":8060},{\"\
    name\":\"tcp-dns-tls\",\"port\":853,\"targetPort\":853}],\"nodeSelector\":{},\"\
    podAnnotations\":{},\"podAntiAffinityLabelSelector\":[],\"podAntiAffinityTermLabelSelector\"\
    :[],\"ports\":[{\"name\":\"status-port\",\"port\":15020,\"targetPort\":15020},{\"\
    name\":\"http2\",\"nodePort\":31380,\"port\":80,\"targetPort\":80},{\"name\":\"\
    https\",\"nodePort\":31390,\"port\":443},{\"name\":\"tcp\",\"nodePort\":31400,\"\
    port\":31400},{\"name\":\"https-kiali\",\"port\":15029,\"targetPort\":15029},{\"\
    name\":\"https-prometheus\",\"port\":15030,\"targetPort\":15030},{\"name\":\"\
    https-grafana\",\"port\":15031,\"targetPort\":15031},{\"name\":\"https-tracing\"\
    ,\"port\":15032,\"targetPort\":15032},{\"name\":\"tls\",\"port\":15443,\"targetPort\"\
    :15443}],\"resources\":{\"limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"\
    requests\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"}},\"rollingMaxSurge\":\"100%\"\
    ,\"rollingMaxUnavailable\":\"25%\",\"sds\":{\"enabled\":false,\"image\":\"node-agent-k8s\"\
    ,\"resources\":{\"limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\"\
    :{\"cpu\":\"100m\",\"memory\":\"128Mi\"}}},\"secretVolumes\":[{\"mountPath\":\"\
    /etc/istio/ingressgateway-certs\",\"name\":\"ingressgateway-certs\",\"secretName\"\
    :\"istio-ingressgateway-certs\"},{\"mountPath\":\"/etc/istio/ingressgateway-ca-certs\"\
    ,\"name\":\"ingressgateway-ca-certs\",\"secretName\":\"istio-ingressgateway-ca-certs\"\
    }],\"serviceAnnotations\":{},\"tolerations\":[],\"type\":\"LoadBalancer\"}},\"\
    global\":{\"arch\":{\"amd64\":2,\"ppc64le\":2,\"s390x\":2},\"certificates\":[],\"\
    configValidation\":true,\"controlPlaneSecurityEnabled\":false,\"defaultNodeSelector\"\
    :{},\"defaultPodDisruptionBudget\":{\"enabled\":true},\"defaultResources\":{\"\
    requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\":[],\"disablePolicyChecks\"\
    :true,\"enableHelmTest\":false,\"enableTracing\":true,\"hub\":\"docker.io/istio\"\
    ,\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\":[],\"k8sIngress\":{\"\
    enableHttps\":false,\"enabled\":false,\"gatewayName\":\"ingressgateway\"},\"localityLbSetting\"\
    :{\"enabled\":true},\"logging\":{\"level\":\"default:info\"},\"meshExpansion\"\
    :{\"enabled\":false,\"useILB\":false},\"meshID\":\"\",\"meshNetworks\":{},\"monitoringPort\"\
    :15014,\"mtls\":{\"auto\":true,\"enabled\":false},\"multiCluster\":{\"clusterName\"\
    :\"\",\"enabled\":false},\"network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\"\
    :false,\"outboundTrafficPolicy\":{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\"\
    :false,\"priorityClassName\":\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"\
    accessLogFile\":\"\",\"accessLogFormat\":\"\",\"autoInject\":\"enabled\",\"clusterDomain\"\
    :\"cluster.local\",\"componentLogLevel\":\"\",\"concurrency\":2,\"dnsRefreshRate\"\
    :\"300s\",\"enableCoreDump\":false,\"enableCoreDumpImage\":\"ubuntu:xenial\",\"\
    envoyAccessLogService\":{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\"\
    ,\"probes\":3,\"time\":\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\"\
    :[]}},\"envoyMetricsService\":{\"enabled\":false,\"tcpKeepalive\":{\"interval\"\
    :\"10s\",\"probes\":3,\"time\":\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\"\
    ,\"subjectAltNames\":[]}},\"envoyStatsd\":{\"enabled\":false},\"excludeIPRanges\"\
    :\"\",\"excludeInboundPorts\":\"\",\"excludeOutboundPorts\":\"\",\"image\":\"\
    proxyv2\",\"includeIPRanges\":\"*\",\"includeInboundPorts\":\"*\",\"kubevirtInterfaces\"\
    :\"\",\"logLevel\":\"\",\"privileged\":false,\"protocolDetectionTimeout\":\"100ms\"\
    ,\"readinessFailureThreshold\":30,\"readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\"\
    :2,\"resources\":{\"limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\"\
    :{\"cpu\":\"100m\",\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"\
    },\"proxy_init\":{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"\
    100m\",\"memory\":\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"\
    }}},\"sds\":{\"enabled\":false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\
    \"},\"tag\":\"1.5.4\",\"tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"\
    },\"lightstep\":{\"accessToken\":\"\",\"address\":\"\",\"cacertPath\":\"\",\"\
    secure\":true},\"stackdriver\":{\"debug\":false,\"maxNumberOfAnnotations\":200,\"\
    maxNumberOfAttributes\":200,\"maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\"\
    :\"\"}},\"trustDomain\":\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"grafana\"\
    :{\"enabled\":false},\"istio_cni\":{\"enabled\":false},\"istiocoredns\":{\"enabled\"\
    :false},\"kiali\":{\"contextPath\":\"/kiali\",\"createDemoSecret\":false,\"dashboard\"\
    :{\"auth\":{\"strategy\":\"login\"},\"grafanaInClusterURL\":\"http://grafana:3000\"\
    ,\"jaegerInClusterURL\":\"http://tracing/jaeger\",\"secretName\":\"kiali\",\"\
    viewOnlyMode\":false},\"enabled\":true,\"global\":{\"arch\":{\"amd64\":2,\"ppc64le\"\
    :2,\"s390x\":2},\"certificates\":[],\"configValidation\":true,\"controlPlaneSecurityEnabled\"\
    :false,\"defaultNodeSelector\":{},\"defaultPodDisruptionBudget\":{\"enabled\"\
    :true},\"defaultResources\":{\"requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\"\
    :[],\"disablePolicyChecks\":true,\"enableHelmTest\":false,\"enableTracing\":true,\"\
    hub\":\"docker.io/istio\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\"\
    :[],\"k8sIngress\":{\"enableHttps\":false,\"enabled\":false,\"gatewayName\":\"\
    ingressgateway\"},\"localityLbSetting\":{\"enabled\":true},\"logging\":{\"level\"\
    :\"default:info\"},\"meshExpansion\":{\"enabled\":false,\"useILB\":false},\"meshID\"\
    :\"\",\"meshNetworks\":{},\"monitoringPort\":15014,\"mtls\":{\"auto\":true,\"\
    enabled\":false},\"multiCluster\":{\"clusterName\":\"\",\"enabled\":false},\"\
    network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\":false,\"outboundTrafficPolicy\"\
    :{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\":false,\"priorityClassName\"\
    :\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"accessLogFile\":\"\",\"accessLogFormat\"\
    :\"\",\"autoInject\":\"enabled\",\"clusterDomain\":\"cluster.local\",\"componentLogLevel\"\
    :\"\",\"concurrency\":2,\"dnsRefreshRate\":\"300s\",\"enableCoreDump\":false,\"\
    enableCoreDumpImage\":\"ubuntu:xenial\",\"envoyAccessLogService\":{\"enabled\"\
    :false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\":\"10s\"},\"\
    tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyMetricsService\"\
    :{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\"\
    :\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyStatsd\"\
    :{\"enabled\":false},\"excludeIPRanges\":\"\",\"excludeInboundPorts\":\"\",\"\
    excludeOutboundPorts\":\"\",\"image\":\"proxyv2\",\"includeIPRanges\":\"*\",\"\
    includeInboundPorts\":\"*\",\"kubevirtInterfaces\":\"\",\"logLevel\":\"\",\"privileged\"\
    :false,\"protocolDetectionTimeout\":\"100ms\",\"readinessFailureThreshold\":30,\"\
    readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\":2,\"resources\":{\"\
    limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"100m\"\
    ,\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"},\"proxy_init\"\
    :{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\"\
    :\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"}}},\"sds\":{\"enabled\"\
    :false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\"},\"tag\":\"1.5.4\",\"\
    tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"},\"lightstep\":{\"accessToken\"\
    :\"\",\"address\":\"\",\"cacertPath\":\"\",\"secure\":true},\"stackdriver\":{\"\
    debug\":false,\"maxNumberOfAnnotations\":200,\"maxNumberOfAttributes\":200,\"\
    maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\":\"\"}},\"trustDomain\"\
    :\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"hub\":\"quay.io/kiali\",\"\
    image\":\"kiali\",\"ingress\":{\"annotations\":{},\"enabled\":false,\"hosts\"\
    :[\"kiali.local\"]},\"nodeSelector\":{},\"podAnnotations\":{},\"podAntiAffinityLabelSelector\"\
    :[],\"podAntiAffinityTermLabelSelector\":[],\"prometheusAddr\":\"http://prometheus:9090\"\
    ,\"replicaCount\":1,\"security\":{\"cert_file\":\"/kiali-cert/cert-chain.pem\"\
    ,\"enabled\":false,\"private_key_file\":\"/kiali-cert/key.pem\"},\"tag\":\"v1.15\"\
    ,\"tolerations\":[]},\"mixer\":{\"adapters\":{\"kubernetesenv\":{\"enabled\":true},\"\
    prometheus\":{\"enabled\":true,\"metricsExpiryDuration\":\"10m\"},\"stdio\":{\"\
    enabled\":false,\"outputAsJson\":true},\"useAdapterCRDs\":false},\"env\":{\"GOMAXPROCS\"\
    :\"6\"},\"global\":{\"arch\":{\"amd64\":2,\"ppc64le\":2,\"s390x\":2},\"certificates\"\
    :[],\"configValidation\":true,\"controlPlaneSecurityEnabled\":false,\"defaultNodeSelector\"\
    :{},\"defaultPodDisruptionBudget\":{\"enabled\":true},\"defaultResources\":{\"\
    requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\":[],\"disablePolicyChecks\"\
    :true,\"enableHelmTest\":false,\"enableTracing\":true,\"hub\":\"docker.io/istio\"\
    ,\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\":[],\"k8sIngress\":{\"\
    enableHttps\":false,\"enabled\":false,\"gatewayName\":\"ingressgateway\"},\"localityLbSetting\"\
    :{\"enabled\":true},\"logging\":{\"level\":\"default:info\"},\"meshExpansion\"\
    :{\"enabled\":false,\"useILB\":false},\"meshID\":\"\",\"meshNetworks\":{},\"monitoringPort\"\
    :15014,\"mtls\":{\"auto\":true,\"enabled\":false},\"multiCluster\":{\"clusterName\"\
    :\"\",\"enabled\":false},\"network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\"\
    :false,\"outboundTrafficPolicy\":{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\"\
    :false,\"priorityClassName\":\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"\
    accessLogFile\":\"\",\"accessLogFormat\":\"\",\"autoInject\":\"enabled\",\"clusterDomain\"\
    :\"cluster.local\",\"componentLogLevel\":\"\",\"concurrency\":2,\"dnsRefreshRate\"\
    :\"300s\",\"enableCoreDump\":false,\"enableCoreDumpImage\":\"ubuntu:xenial\",\"\
    envoyAccessLogService\":{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\"\
    ,\"probes\":3,\"time\":\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\"\
    :[]}},\"envoyMetricsService\":{\"enabled\":false,\"tcpKeepalive\":{\"interval\"\
    :\"10s\",\"probes\":3,\"time\":\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\"\
    ,\"subjectAltNames\":[]}},\"envoyStatsd\":{\"enabled\":false},\"excludeIPRanges\"\
    :\"\",\"excludeInboundPorts\":\"\",\"excludeOutboundPorts\":\"\",\"image\":\"\
    proxyv2\",\"includeIPRanges\":\"*\",\"includeInboundPorts\":\"*\",\"kubevirtInterfaces\"\
    :\"\",\"logLevel\":\"\",\"privileged\":false,\"protocolDetectionTimeout\":\"100ms\"\
    ,\"readinessFailureThreshold\":30,\"readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\"\
    :2,\"resources\":{\"limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\"\
    :{\"cpu\":\"100m\",\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"\
    },\"proxy_init\":{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"\
    100m\",\"memory\":\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"\
    }}},\"sds\":{\"enabled\":false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\
    \"},\"tag\":\"1.5.4\",\"tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"\
    },\"lightstep\":{\"accessToken\":\"\",\"address\":\"\",\"cacertPath\":\"\",\"\
    secure\":true},\"stackdriver\":{\"debug\":false,\"maxNumberOfAnnotations\":200,\"\
    maxNumberOfAttributes\":200,\"maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\"\
    :\"\"}},\"trustDomain\":\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"image\"\
    :\"mixer\",\"nodeSelector\":{},\"podAnnotations\":{},\"podAntiAffinityLabelSelector\"\
    :[],\"podAntiAffinityTermLabelSelector\":[],\"policy\":{\"autoscaleEnabled\":true,\"\
    autoscaleMax\":5,\"autoscaleMin\":1,\"cpu\":{\"targetAverageUtilization\":80},\"\
    enabled\":true,\"replicaCount\":1,\"rollingMaxSurge\":\"100%\",\"rollingMaxUnavailable\"\
    :\"25%\"},\"telemetry\":{\"autoscaleEnabled\":true,\"autoscaleMax\":5,\"autoscaleMin\"\
    :1,\"cpu\":{\"targetAverageUtilization\":80},\"enabled\":true,\"loadshedding\"\
    :{\"latencyThreshold\":\"100ms\",\"mode\":\"enforce\"},\"replicaCount\":1,\"reportBatchMaxEntries\"\
    :100,\"reportBatchMaxTime\":\"1s\",\"resources\":{\"limits\":{\"cpu\":\"4800m\"\
    ,\"memory\":\"4G\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"1G\"}},\"rollingMaxSurge\"\
    :\"100%\",\"rollingMaxUnavailable\":\"25%\",\"sessionAffinityEnabled\":false},\"\
    tolerations\":[]},\"nodeagent\":{\"enabled\":false},\"pilot\":{\"autoscaleEnabled\"\
    :true,\"autoscaleMax\":5,\"autoscaleMin\":1,\"configSource\":{},\"cpu\":{\"targetAverageUtilization\"\
    :80},\"enableProtocolSniffingForInbound\":false,\"enableProtocolSniffingForOutbound\"\
    :true,\"enabled\":true,\"env\":{\"PILOT_PUSH_THROTTLE\":100},\"global\":{\"arch\"\
    :{\"amd64\":2,\"ppc64le\":2,\"s390x\":2},\"certificates\":[],\"configValidation\"\
    :true,\"controlPlaneSecurityEnabled\":false,\"defaultNodeSelector\":{},\"defaultPodDisruptionBudget\"\
    :{\"enabled\":true},\"defaultResources\":{\"requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\"\
    :[],\"disablePolicyChecks\":true,\"enableHelmTest\":false,\"enableTracing\":true,\"\
    hub\":\"docker.io/istio\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\"\
    :[],\"k8sIngress\":{\"enableHttps\":false,\"enabled\":false,\"gatewayName\":\"\
    ingressgateway\"},\"localityLbSetting\":{\"enabled\":true},\"logging\":{\"level\"\
    :\"default:info\"},\"meshExpansion\":{\"enabled\":false,\"useILB\":false},\"meshID\"\
    :\"\",\"meshNetworks\":{},\"monitoringPort\":15014,\"mtls\":{\"auto\":true,\"\
    enabled\":false},\"multiCluster\":{\"clusterName\":\"\",\"enabled\":false},\"\
    network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\":false,\"outboundTrafficPolicy\"\
    :{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\":false,\"priorityClassName\"\
    :\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"accessLogFile\":\"\",\"accessLogFormat\"\
    :\"\",\"autoInject\":\"enabled\",\"clusterDomain\":\"cluster.local\",\"componentLogLevel\"\
    :\"\",\"concurrency\":2,\"dnsRefreshRate\":\"300s\",\"enableCoreDump\":false,\"\
    enableCoreDumpImage\":\"ubuntu:xenial\",\"envoyAccessLogService\":{\"enabled\"\
    :false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\":\"10s\"},\"\
    tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyMetricsService\"\
    :{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\"\
    :\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyStatsd\"\
    :{\"enabled\":false},\"excludeIPRanges\":\"\",\"excludeInboundPorts\":\"\",\"\
    excludeOutboundPorts\":\"\",\"image\":\"proxyv2\",\"includeIPRanges\":\"*\",\"\
    includeInboundPorts\":\"*\",\"kubevirtInterfaces\":\"\",\"logLevel\":\"\",\"privileged\"\
    :false,\"protocolDetectionTimeout\":\"100ms\",\"readinessFailureThreshold\":30,\"\
    readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\":2,\"resources\":{\"\
    limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"100m\"\
    ,\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"},\"proxy_init\"\
    :{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\"\
    :\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"}}},\"sds\":{\"enabled\"\
    :false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\"},\"tag\":\"1.5.4\",\"\
    tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"},\"lightstep\":{\"accessToken\"\
    :\"\",\"address\":\"\",\"cacertPath\":\"\",\"secure\":true},\"stackdriver\":{\"\
    debug\":false,\"maxNumberOfAnnotations\":200,\"maxNumberOfAttributes\":200,\"\
    maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\":\"\"}},\"trustDomain\"\
    :\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"image\":\"pilot\",\"keepaliveMaxServerConnectionAge\"\
    :\"30m\",\"nodeSelector\":{},\"podAnnotations\":{},\"podAntiAffinityLabelSelector\"\
    :[],\"podAntiAffinityTermLabelSelector\":[],\"resources\":{\"requests\":{\"cpu\"\
    :\"500m\",\"memory\":\"2048Mi\"}},\"rollingMaxSurge\":\"100%\",\"rollingMaxUnavailable\"\
    :\"25%\",\"sidecar\":true,\"tolerations\":[],\"traceSampling\":1},\"prometheus\"\
    :{\"contextPath\":\"/prometheus\",\"enabled\":true,\"global\":{\"arch\":{\"amd64\"\
    :2,\"ppc64le\":2,\"s390x\":2},\"certificates\":[],\"configValidation\":true,\"\
    controlPlaneSecurityEnabled\":false,\"defaultNodeSelector\":{},\"defaultPodDisruptionBudget\"\
    :{\"enabled\":true},\"defaultResources\":{\"requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\"\
    :[],\"disablePolicyChecks\":true,\"enableHelmTest\":false,\"enableTracing\":true,\"\
    hub\":\"docker.io/istio\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\"\
    :[],\"k8sIngress\":{\"enableHttps\":false,\"enabled\":false,\"gatewayName\":\"\
    ingressgateway\"},\"localityLbSetting\":{\"enabled\":true},\"logging\":{\"level\"\
    :\"default:info\"},\"meshExpansion\":{\"enabled\":false,\"useILB\":false},\"meshID\"\
    :\"\",\"meshNetworks\":{},\"monitoringPort\":15014,\"mtls\":{\"auto\":true,\"\
    enabled\":false},\"multiCluster\":{\"clusterName\":\"\",\"enabled\":false},\"\
    network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\":false,\"outboundTrafficPolicy\"\
    :{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\":false,\"priorityClassName\"\
    :\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"accessLogFile\":\"\",\"accessLogFormat\"\
    :\"\",\"autoInject\":\"enabled\",\"clusterDomain\":\"cluster.local\",\"componentLogLevel\"\
    :\"\",\"concurrency\":2,\"dnsRefreshRate\":\"300s\",\"enableCoreDump\":false,\"\
    enableCoreDumpImage\":\"ubuntu:xenial\",\"envoyAccessLogService\":{\"enabled\"\
    :false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\":\"10s\"},\"\
    tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyMetricsService\"\
    :{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\"\
    :\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyStatsd\"\
    :{\"enabled\":false},\"excludeIPRanges\":\"\",\"excludeInboundPorts\":\"\",\"\
    excludeOutboundPorts\":\"\",\"image\":\"proxyv2\",\"includeIPRanges\":\"*\",\"\
    includeInboundPorts\":\"*\",\"kubevirtInterfaces\":\"\",\"logLevel\":\"\",\"privileged\"\
    :false,\"protocolDetectionTimeout\":\"100ms\",\"readinessFailureThreshold\":30,\"\
    readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\":2,\"resources\":{\"\
    limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"100m\"\
    ,\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"},\"proxy_init\"\
    :{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\"\
    :\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"}}},\"sds\":{\"enabled\"\
    :false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\"},\"tag\":\"1.5.4\",\"\
    tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"},\"lightstep\":{\"accessToken\"\
    :\"\",\"address\":\"\",\"cacertPath\":\"\",\"secure\":true},\"stackdriver\":{\"\
    debug\":false,\"maxNumberOfAnnotations\":200,\"maxNumberOfAttributes\":200,\"\
    maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\":\"\"}},\"trustDomain\"\
    :\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"hub\":\"docker.io/prom\",\"\
    image\":\"prometheus\",\"ingress\":{\"enabled\":false,\"hosts\":[\"prometheus.local\"\
    ]},\"nodeSelector\":{},\"podAntiAffinityLabelSelector\":[],\"podAntiAffinityTermLabelSelector\"\
    :[],\"replicaCount\":1,\"retention\":\"6h\",\"scrapeInterval\":\"15s\",\"security\"\
    :{\"enabled\":true},\"service\":{\"annotations\":{},\"nodePort\":{\"enabled\"\
    :false,\"port\":32090}},\"tag\":\"v2.12.0\",\"tolerations\":[]},\"security\":{\"\
    citadelHealthCheck\":false,\"createMeshPolicy\":true,\"enableNamespacesByDefault\"\
    :true,\"enabled\":true,\"env\":{},\"global\":{\"arch\":{\"amd64\":2,\"ppc64le\"\
    :2,\"s390x\":2},\"certificates\":[],\"configValidation\":true,\"controlPlaneSecurityEnabled\"\
    :false,\"defaultNodeSelector\":{},\"defaultPodDisruptionBudget\":{\"enabled\"\
    :true},\"defaultResources\":{\"requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\"\
    :[],\"disablePolicyChecks\":true,\"enableHelmTest\":false,\"enableTracing\":true,\"\
    hub\":\"docker.io/istio\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\"\
    :[],\"k8sIngress\":{\"enableHttps\":false,\"enabled\":false,\"gatewayName\":\"\
    ingressgateway\"},\"localityLbSetting\":{\"enabled\":true},\"logging\":{\"level\"\
    :\"default:info\"},\"meshExpansion\":{\"enabled\":false,\"useILB\":false},\"meshID\"\
    :\"\",\"meshNetworks\":{},\"monitoringPort\":15014,\"mtls\":{\"auto\":true,\"\
    enabled\":false},\"multiCluster\":{\"clusterName\":\"\",\"enabled\":false},\"\
    network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\":false,\"outboundTrafficPolicy\"\
    :{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\":false,\"priorityClassName\"\
    :\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"accessLogFile\":\"\",\"accessLogFormat\"\
    :\"\",\"autoInject\":\"enabled\",\"clusterDomain\":\"cluster.local\",\"componentLogLevel\"\
    :\"\",\"concurrency\":2,\"dnsRefreshRate\":\"300s\",\"enableCoreDump\":false,\"\
    enableCoreDumpImage\":\"ubuntu:xenial\",\"envoyAccessLogService\":{\"enabled\"\
    :false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\":\"10s\"},\"\
    tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyMetricsService\"\
    :{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\"\
    :\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyStatsd\"\
    :{\"enabled\":false},\"excludeIPRanges\":\"\",\"excludeInboundPorts\":\"\",\"\
    excludeOutboundPorts\":\"\",\"image\":\"proxyv2\",\"includeIPRanges\":\"*\",\"\
    includeInboundPorts\":\"*\",\"kubevirtInterfaces\":\"\",\"logLevel\":\"\",\"privileged\"\
    :false,\"protocolDetectionTimeout\":\"100ms\",\"readinessFailureThreshold\":30,\"\
    readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\":2,\"resources\":{\"\
    limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"100m\"\
    ,\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"},\"proxy_init\"\
    :{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\"\
    :\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"}}},\"sds\":{\"enabled\"\
    :false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\"},\"tag\":\"1.5.4\",\"\
    tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"},\"lightstep\":{\"accessToken\"\
    :\"\",\"address\":\"\",\"cacertPath\":\"\",\"secure\":true},\"stackdriver\":{\"\
    debug\":false,\"maxNumberOfAnnotations\":200,\"maxNumberOfAttributes\":200,\"\
    maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\":\"\"}},\"trustDomain\"\
    :\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"image\":\"citadel\",\"nodeSelector\"\
    :{},\"podAnnotations\":{},\"podAntiAffinityLabelSelector\":[],\"podAntiAffinityTermLabelSelector\"\
    :[],\"replicaCount\":1,\"rollingMaxSurge\":\"100%\",\"rollingMaxUnavailable\"\
    :\"25%\",\"selfSigned\":true,\"tolerations\":[],\"workloadCertTtl\":\"2160h\"\
    },\"sidecarInjectorWebhook\":{\"alwaysInjectSelector\":[],\"enableNamespacesByDefault\"\
    :false,\"enabled\":true,\"global\":{\"arch\":{\"amd64\":2,\"ppc64le\":2,\"s390x\"\
    :2},\"certificates\":[],\"configValidation\":true,\"controlPlaneSecurityEnabled\"\
    :false,\"defaultNodeSelector\":{},\"defaultPodDisruptionBudget\":{\"enabled\"\
    :true},\"defaultResources\":{\"requests\":{\"cpu\":\"10m\"}},\"defaultTolerations\"\
    :[],\"disablePolicyChecks\":true,\"enableHelmTest\":false,\"enableTracing\":true,\"\
    hub\":\"docker.io/istio\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\"\
    :[],\"k8sIngress\":{\"enableHttps\":false,\"enabled\":false,\"gatewayName\":\"\
    ingressgateway\"},\"localityLbSetting\":{\"enabled\":true},\"logging\":{\"level\"\
    :\"default:info\"},\"meshExpansion\":{\"enabled\":false,\"useILB\":false},\"meshID\"\
    :\"\",\"meshNetworks\":{},\"monitoringPort\":15014,\"mtls\":{\"auto\":true,\"\
    enabled\":false},\"multiCluster\":{\"clusterName\":\"\",\"enabled\":false},\"\
    network\":\"\",\"oneNamespace\":false,\"operatorManageWebhooks\":false,\"outboundTrafficPolicy\"\
    :{\"mode\":\"ALLOW_ANY\"},\"policyCheckFailOpen\":false,\"priorityClassName\"\
    :\"\",\"proxy\":{\"accessLogEncoding\":\"TEXT\",\"accessLogFile\":\"\",\"accessLogFormat\"\
    :\"\",\"autoInject\":\"enabled\",\"clusterDomain\":\"cluster.local\",\"componentLogLevel\"\
    :\"\",\"concurrency\":2,\"dnsRefreshRate\":\"300s\",\"enableCoreDump\":false,\"\
    enableCoreDumpImage\":\"ubuntu:xenial\",\"envoyAccessLogService\":{\"enabled\"\
    :false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\":\"10s\"},\"\
    tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyMetricsService\"\
    :{\"enabled\":false,\"tcpKeepalive\":{\"interval\":\"10s\",\"probes\":3,\"time\"\
    :\"10s\"},\"tlsSettings\":{\"mode\":\"DISABLE\",\"subjectAltNames\":[]}},\"envoyStatsd\"\
    :{\"enabled\":false},\"excludeIPRanges\":\"\",\"excludeInboundPorts\":\"\",\"\
    excludeOutboundPorts\":\"\",\"image\":\"proxyv2\",\"includeIPRanges\":\"*\",\"\
    includeInboundPorts\":\"*\",\"kubevirtInterfaces\":\"\",\"logLevel\":\"\",\"privileged\"\
    :false,\"protocolDetectionTimeout\":\"100ms\",\"readinessFailureThreshold\":30,\"\
    readinessInitialDelaySeconds\":1,\"readinessPeriodSeconds\":2,\"resources\":{\"\
    limits\":{\"cpu\":\"2000m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"100m\"\
    ,\"memory\":\"128Mi\"}},\"statusPort\":15020,\"tracer\":\"zipkin\"},\"proxy_init\"\
    :{\"image\":\"proxyv2\",\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\"\
    :\"50Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"10Mi\"}}},\"sds\":{\"enabled\"\
    :false,\"token\":{\"aud\":\"istio-ca\"},\"udsPath\":\"\"},\"tag\":\"1.5.4\",\"\
    tracer\":{\"datadog\":{\"address\":\"$(HOST_IP):8126\"},\"lightstep\":{\"accessToken\"\
    :\"\",\"address\":\"\",\"cacertPath\":\"\",\"secure\":true},\"stackdriver\":{\"\
    debug\":false,\"maxNumberOfAnnotations\":200,\"maxNumberOfAttributes\":200,\"\
    maxNumberOfMessageEvents\":200},\"zipkin\":{\"address\":\"\"}},\"trustDomain\"\
    :\"\",\"trustDomainAliases\":[],\"useMCP\":true},\"image\":\"sidecar_injector\"\
    ,\"injectedAnnotations\":{},\"neverInjectSelector\":[],\"nodeSelector\":{},\"\
    podAnnotations\":{},\"podAntiAffinityLabelSelector\":[],\"podAntiAffinityTermLabelSelector\"\
    :[],\"replicaCount\":1,\"rewriteAppHTTPProbe\":true,\"rollingMaxSurge\":\"100%\"\
    ,\"rollingMaxUnavailable\":\"25%\",\"tolerations\":[]},\"tracing\":{\"enabled\"\
    :false}}"
binaryData: {}
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-sidecar-injector"
  labels:
    app: "istio"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "istio"
    istio: "sidecar-injector"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "nodes"
  - "services"
  - "endpoints"
  - "pods"
  - "nodes/proxy"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  verbs:
  - "get"
- apiGroups: []
  nonResourceURLs:
  - "/metrics"
  resourceNames: []
  resources: []
  verbs:
  - "get"
metadata:
  annotations: {}
  name: "prometheus-istio-system"
  labels:
    app: "prometheus"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "prometheus"
    release: "istio"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-ingressgateway-service-account"
  labels:
    app: "istio-ingressgateway"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "gateways"
    release: "istio"

---
metadata:
  namespace: "istio-system"
  name: "promtcpconnectionopen"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "rule"
spec:
  match: "context.protocol == \"tcp\" && ((connection.event | \"na\") == \"open\")"
  actions:
  - handler: "prometheus"
    instances:
    - "tcpconnectionsopened"

---
kind: "ConfigMap"
apiVersion: "v1"
data:
  validatingwebhookconfiguration.yaml: "apiVersion: admissionregistration.k8s.io/v1beta1\n\
    kind: ValidatingWebhookConfiguration\nmetadata:\n  name: istio-galley\n  labels:\n\
    \    app: galley\n    chart: galley\n    heritage: Tiller\n    release: istio\n\
    \    istio: galley\nwebhooks:\n  - name: pilot.validation.istio.io\n    clientConfig:\n\
    \      service:\n        name: istio-galley\n        namespace: istio-system\n\
    \        path: \"/admitpilot\"\n      caBundle: \"\"\n    rules:\n      - operations:\n\
    \        - CREATE\n        - UPDATE\n        apiGroups:\n        - config.istio.io\n\
    \        apiVersions:\n        - v1alpha2\n        resources:\n        - httpapispecs\n\
    \        - httpapispecbindings\n        - quotaspecs\n        - quotaspecbindings\n\
    \      - operations:\n        - CREATE\n        - UPDATE\n        apiGroups:\n\
    \        - rbac.istio.io\n        apiVersions:\n        - \"*\"\n        resources:\n\
    \        - \"*\"\n      - operations:\n        - CREATE\n        - UPDATE\n  \
    \      apiGroups:\n        - security.istio.io\n        apiVersions:\n       \
    \ - \"*\"\n        resources:\n        - \"*\"\n      - operations:\n        -\
    \ CREATE\n        - UPDATE\n        apiGroups:\n        - authentication.istio.io\n\
    \        apiVersions:\n        - \"*\"\n        resources:\n        - \"*\"\n\
    \      - operations:\n        - CREATE\n        - UPDATE\n        apiGroups:\n\
    \        - networking.istio.io\n        apiVersions:\n        - \"*\"\n      \
    \  resources:\n        - destinationrules\n        - envoyfilters\n        - gateways\n\
    \        - serviceentries\n        - sidecars\n        - virtualservices\n   \
    \ # Fail open until the validation webhook is ready. The webhook controller\n\
    \    # will update this to `Fail` and patch in the `caBundle` when the webhook\n\
    \    # endpoint is ready.\n    failurePolicy: Ignore\n    sideEffects: None\n\
    \  - name: mixer.validation.istio.io\n    clientConfig:\n      service:\n    \
    \    name: istio-galley\n        namespace: istio-system\n        path: \"/admitmixer\"\
    \n      caBundle: \"\"\n    rules:\n      - operations:\n        - CREATE\n  \
    \      - UPDATE\n        apiGroups:\n        - config.istio.io\n        apiVersions:\n\
    \        - v1alpha2\n        resources:\n        - rules\n        - attributemanifests\n\
    \        - adapters\n        - handlers\n        - instances\n        - templates\n\
    \    # Fail open until the validation webhook is ready. The webhook controller\n\
    \    # will update this to `Fail` and patch in the `caBundle` when the webhook\n\
    \    # endpoint is ready.\n    failurePolicy: Ignore\n    sideEffects: None"
binaryData: {}
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-galley-configuration"
  labels:
    app: "galley"
    app.kubernetes.io/name: "istio"
    release: "istio"
    heritage: "Tiller"
    chart: "galley"
    istio: "galley"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "istio-system"
  annotations: {}
  name: "istio-pilot-service-account"
  labels:
    app: "pilot"
    heritage: "Tiller"
    app.kubernetes.io/name: "istio"
    chart: "pilot"
    release: "istio"

---
metadata:
  namespace: "istio-system"
  name: "promtcpconnectionclosed"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "rule"
spec:
  match: "context.protocol == \"tcp\" && ((connection.event | \"na\") == \"close\"\
    )"
  actions:
  - handler: "prometheus"
    instances:
    - "tcpconnectionsclosed"

---
metadata:
  namespace: "istio-system"
  name: "kubernetesenv"
  labels:
    app: "mixer"
    release: "istio"
    heritage: "Tiller"
    chart: "mixer"
apiVersion: "config.istio.io/v1alpha2"
kind: "handler"
spec:
  compiledAdapter: "kubernetesenv"
  params: {}
